import os
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –î–ê–ù–ù–´–ï ---

# –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã
IRREGULAR_VERBS = [
    {"infinitive": "be", "past": "was/were", "participle": "been", "translation": "–±—ã—Ç—å", "level": "A1"},
    {"infinitive": "have", "past": "had", "participle": "had", "translation": "–∏–º–µ—Ç—å", "level": "A1"},
    {"infinitive": "do", "past": "did", "participle": "done", "translation": "–¥–µ–ª–∞—Ç—å", "level": "A1"},
    {"infinitive": "go", "past": "went", "participle": "gone", "translation": "–∏–¥—Ç–∏", "level": "A1"},
    {"infinitive": "see", "past": "saw", "participle": "seen", "translation": "–≤–∏–¥–µ—Ç—å", "level": "A1"},
    {"infinitive": "come", "past": "came", "participle": "come", "translation": "–ø—Ä–∏—Ö–æ–¥–∏—Ç—å", "level": "A1"},
    {"infinitive": "get", "past": "got", "participle": "got/gotten", "translation": "–ø–æ–ª—É—á–∞—Ç—å", "level": "A1"},
    {"infinitive": "give", "past": "gave", "participle": "given", "translation": "–¥–∞–≤–∞—Ç—å", "level": "A1"},
    {"infinitive": "take", "past": "took", "participle": "taken", "translation": "–±—Ä–∞—Ç—å", "level": "A1"},
    {"infinitive": "make", "past": "made", "participle": "made", "translation": "–¥–µ–ª–∞—Ç—å", "level": "A1"},
]

# –û—Å–Ω–æ–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã
BASIC_VERBS = [
    {"english": "like", "russian": "–Ω—Ä–∞–≤–∏—Ç—å—Å—è", "example": "I like coffee"},
    {"english": "want", "russian": "—Ö–æ—Ç–µ—Ç—å", "example": "I want water"},
    {"english": "need", "russian": "–Ω—É–∂–¥–∞—Ç—å—Å—è", "example": "I need help"},
    {"english": "can", "russian": "–º–æ—á—å", "example": "I can swim"},
    {"english": "know", "russian": "–∑–Ω–∞—Ç—å", "example": "I know this"},
    {"english": "think", "russian": "–¥—É–º–∞—Ç—å", "example": "I think so"},
    {"english": "say", "russian": "–≥–æ–≤–æ—Ä–∏—Ç—å", "example": "I say hello"},
    {"english": "see", "russian": "–≤–∏–¥–µ—Ç—å", "example": "I see you"},
    {"english": "come", "russian": "–ø—Ä–∏—Ö–æ–¥–∏—Ç—å", "example": "I come home"},
    {"english": "look", "russian": "—Å–º–æ—Ç—Ä–µ—Ç—å", "example": "Look at me"},
]

# –í—Ä–µ–º–µ–Ω–∞
TENSES = {
    "present_simple": {
        "name": "Present Simple",
        "russian_name": "–ù–∞—Å—Ç–æ—è—â–µ–µ –ü—Ä–æ—Å—Ç–æ–µ",
        "usage": "–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –ø—Ä–∏–≤—ã—á–∫–∏, —Ñ–∞–∫—Ç—ã",
        "structure": "Subject + V1/V1+s",
        "examples": [
            "I work every day - –Ø —Ä–∞–±–æ—Ç–∞—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
            "He works in an office - –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ–∏—Å–µ",
            "We like music - –ù–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –º—É–∑—ã–∫–∞"
        ],
        "signal_words": ["always", "usually", "often", "every day", "sometimes"]
    },
    "present_continuous": {
        "name": "Present Continuous",
        "russian_name": "–ù–∞—Å—Ç–æ—è—â–µ–µ –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ",
        "usage": "–î–µ–π—Å—Ç–≤–∏—è –≤ –º–æ–º–µ–Ω—Ç —Ä–µ—á–∏, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏",
        "structure": "Subject + am/is/are + V-ing",
        "examples": [
            "I am reading now - –Ø —Å–µ–π—á–∞—Å —á–∏—Ç–∞—é",
            "She is watching TV - –û–Ω–∞ —Å–º–æ—Ç—Ä–∏—Ç —Ç–µ–ª–µ–≤–∏–∑–æ—Ä",
            "They are playing football - –û–Ω–∏ –∏–≥—Ä–∞—é—Ç –≤ —Ñ—É—Ç–±–æ–ª"
        ],
        "signal_words": ["now", "at the moment", "currently", "today"]
    },
    "past_simple": {
        "name": "Past Simple",
        "russian_name": "–ü—Ä–æ—à–µ–¥—à–µ–µ –ü—Ä–æ—Å—Ç–æ–µ",
        "usage": "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø—Ä–æ—à–ª–æ–º",
        "structure": "Subject + V2",
        "examples": [
            "I worked yesterday - –Ø —Ä–∞–±–æ—Ç–∞–ª –≤—á–µ—Ä–∞",
            "She went to school - –û–Ω–∞ —Ö–æ–¥–∏–ª–∞ –≤ —à–∫–æ–ª—É",
            "We saw a movie - –ú—ã —Å–º–æ—Ç—Ä–µ–ª–∏ —Ñ–∏–ª—å–º"
        ],
        "signal_words": ["yesterday", "last week", "ago", "in 2020"]
    },
    "future_simple": {
        "name": "Future Simple",
        "russian_name": "–ë—É–¥—É—â–µ–µ –ü—Ä–æ—Å—Ç–æ–µ",
        "usage": "–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –æ–±–µ—â–∞–Ω–∏—è",
        "structure": "Subject + will + V1",
        "examples": [
            "I will help you - –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ",
            "It will rain tomorrow - –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –¥–æ–∂–¥—å",
            "We will travel - –ú—ã –±—É–¥–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
        ],
        "signal_words": ["tomorrow", "next week", "soon", "in the future"]
    }
}

# –§—Ä–∞–∑—ã
PHRASES = {
    "greetings": {
        "name": "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
        "phrases": [
            {"english": "Hello! / Hi!", "russian": "–ü—Ä–∏–≤–µ—Ç!", "context": "–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"},
            {"english": "Good morning!", "russian": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!", "context": "–î–æ 12:00"},
            {"english": "How are you?", "russian": "–ö–∞–∫ –¥–µ–ª–∞?", "context": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"},
            {"english": "I'm fine, thank you!", "russian": "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!", "context": "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç"},
        ]
    },
    "introduction": {
        "name": "ü§ù –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ",
        "phrases": [
            {"english": "What is your name?", "russian": "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", "context": "–°–ø—Ä–æ—Å–∏—Ç—å –∏–º—è"},
            {"english": "My name is...", "russian": "–ú–µ–Ω—è –∑–æ–≤—É—Ç...", "context": "–ù–∞–∑–≤–∞—Ç—å —Å–≤–æ–µ –∏–º—è"},
            {"english": "Where are you from?", "russian": "–û—Ç–∫—É–¥–∞ —Ç—ã?", "context": "–°–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∫—É–¥–∞"},
            {"english": "I'm from Russia", "russian": "–Ø –∏–∑ –†–æ—Å—Å–∏–∏", "context": "–û—Ç–≤–µ—Ç–∏—Ç—å –æ—Ç–∫—É–¥–∞"},
        ]
    },
    "cafe": {
        "name": "‚òï –í –∫–∞—Ñ–µ",
        "phrases": [
            {"english": "Can I have a coffee?", "russian": "–ú–æ–∂–Ω–æ –º–Ω–µ –∫–æ—Ñ–µ?", "context": "–ó–∞–∫–∞–∑ –Ω–∞–ø–∏—Ç–∫–∞"},
            {"english": "How much is it?", "russian": "–°–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç?", "context": "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É"},
            {"english": "Thank you!", "russian": "–°–ø–∞—Å–∏–±–æ!", "context": "–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å"},
        ]
    }
}

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---

def get_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìö –í—Ä–µ–º–µ–Ω–∞", callback_data="menu_tenses")],
        [InlineKeyboardButton("üî§ –ì–ª–∞–≥–æ–ª—ã", callback_data="menu_verbs")],
        [InlineKeyboardButton("üí¨ –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã", callback_data="menu_phrases")],
        [InlineKeyboardButton("üé¥ –ö–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="menu_flashcards")],
        [InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="menu_about")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_tenses_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("Present Simple", callback_data="tense_present_simple")],
        [InlineKeyboardButton("Present Continuous", callback_data="tense_present_continuous")],
        [InlineKeyboardButton("Past Simple", callback_data="tense_past_simple")],
        [InlineKeyboardButton("Future Simple", callback_data="tense_future_simple")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_verbs_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìñ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã", callback_data="verbs_irregular")],
        [InlineKeyboardButton("üî† –û—Å–Ω–æ–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã", callback_data="verbs_basic")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_phrases_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data="phrases_greetings")],
        [InlineKeyboardButton("ü§ù –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data="phrases_introduction")],
        [InlineKeyboardButton("‚òï –í –∫–∞—Ñ–µ", callback_data="phrases_cafe")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üá¨üáß *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ English Helper Bot!* üá∫üá∏

–≠—Ç–æ –≤–∞—à –ª–∏—á–Ω—ã–π –±–ª–æ–∫–Ω–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞!

‚ú® *–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:*
‚Ä¢ üìö –û–±—ä—è—Å–Ω—è–µ—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤—Ä–µ–º–µ–Ω–∞
‚Ä¢ üî§ –£—á–∏—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã
‚Ä¢ üí¨ –î–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã
‚Ä¢ üé¥ –ü–æ–º–æ–≥–∞–µ—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–ª–æ–≤–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è:
    """
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*

1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
2. –í—ã–±–∏—Ä–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã
3. –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª
4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è

*–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!* üöÄ
    """
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ---

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "back_to_main":
        text = "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
        keyboard = get_main_menu_keyboard()
    
    elif callback_data == "menu_tenses":
        text = "üìö *–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤—Ä–µ–º–µ–Ω–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:"
        keyboard = get_tenses_menu_keyboard()
    
    elif callback_data == "menu_verbs":
        text = "üî§ *–ì–ª–∞–≥–æ–ª—ã –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥–ª–∞–≥–æ–ª–æ–≤:"
        keyboard = get_verbs_menu_keyboard()
    
    elif callback_data == "menu_phrases":
        text = "üí¨ *–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ—Ä–∞–∑:"
        keyboard = get_phrases_menu_keyboard()
    
    elif callback_data == "menu_flashcards":
        return await send_flashcard(update, context)
    
    elif callback_data == "menu_about":
        text = """
‚ÑπÔ∏è *–û –±–æ—Ç–µ English Helper*

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ —Å –Ω—É–ª—è!

üìä *–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:*
‚Ä¢ 4 –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ
‚Ä¢ 10+ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤
‚Ä¢ 10+ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤
‚Ä¢ 10+ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã—Ö —Ñ—Ä–∞–∑

üéØ *–£—Ä–æ–≤–µ–Ω—å:* –ù–∞—á–∞–ª—å–Ω—ã–π (A1)

*–£—á–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º!* üåü
        """
        keyboard = get_main_menu_keyboard()
    
    else:
        return
    
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=keyboard
    )

async def handle_tenses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    tense_key = query.data.replace("tense_", "")
    
    if tense_key in TENSES:
        tense = TENSES[tense_key]
        
        text = f"""
üìö *{tense['name']}* ({tense['russian_name']})

üéØ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:* {tense['usage']}

üèóÔ∏è *–§–æ—Ä–º—É–ª–∞:* `{tense['structure']}`

üìù *–ü—Ä–∏–º–µ—Ä—ã:*
"""
        for example in tense['examples']:
            text += f"‚Ä¢ {example}\n"
        
        text += f"\nüîç *–°–ª–æ–≤–∞-–º–∞—Ä–∫–µ—Ä—ã:* {', '.join(tense['signal_words'])}"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=get_tenses_menu_keyboard()
        )

async def handle_verbs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "verbs_irregular":
        verbs_text = "üìñ *–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã:*\n\n"
        
        for verb in IRREGULAR_VERBS:
            verbs_text += f"*{verb['infinitive']}* - {verb['past']} - {verb['participle']}\n"
            verbs_text += f"üá∑üá∫ {verb['translation']} | üéØ {verb['level']}\n\n"
        
        verbs_text += "üí° *–°–æ–≤–µ—Ç:* –£—á–∏—Ç–µ –ø–æ 5 –≥–ª–∞–≥–æ–ª–æ–≤ –≤ –¥–µ–Ω—å!"
        
        await query.edit_message_text(
            text=verbs_text,
            parse_mode='Markdown',
            reply_markup=get_verbs_menu_keyboard()
        )
    
    elif query.data == "verbs_basic":
        verbs_text = "üî† *–û—Å–Ω–æ–≤–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö:*\n\n"
        
        for verb in BASIC_VERBS:
            verbs_text += f"*{verb['english']}* - {verb['russian']}\n"
            verbs_text += f"   _–ü—Ä–∏–º–µ—Ä: {verb['example']}_\n\n"
        
        await query.edit_message_text(
            text=verbs_text,
            parse_mode='Markdown',
            reply_markup=get_verbs_menu_keyboard()
        )

async def handle_phrases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    category_key = query.data.replace("phrases_", "")
    
    if category_key in PHRASES:
        category = PHRASES[category_key]
        
        text = f"*{category['name']}*\n\n"
        
        for phrase in category['phrases']:
            text += f"üí¨ *{phrase['english']}*\n"
            text += f"üá∑üá∫ {phrase['russian']}\n"
            text += f"_üí° {phrase['context']}_\n\n"
        
        text += "üí° *–°–æ–≤–µ—Ç:* –ü—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç–µ —Ñ—Ä–∞–∑—ã –≤—Å–ª—É—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!"
        
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=get_phrases_menu_keyboard()
        )

async def send_flashcard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    
    # –°–ª—É—á–∞–π–Ω–æ –≤—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏
    card_type = random.choice(['irregular_verb', 'basic_verb', 'phrase'])
    
    if card_type == 'irregular_verb':
        verb = random.choice(IRREGULAR_VERBS)
        text = f"""
üé¥ *–ö–∞—Ä—Ç–æ—á–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–ª–∞–≥–æ–ª*

üí¨ *–ò–Ω—Ñ–∏–Ω–∏—Ç–∏–≤:* {verb['infinitive']}
‚è≥ *–ü—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è:* {verb['past']}
üìù *–ü—Ä–∏—á–∞—Å—Ç–∏–µ II:* {verb['participle']}
üá∑üá∫ *–ü–µ—Ä–µ–≤–æ–¥:* {verb['translation']}
üéØ *–£—Ä–æ–≤–µ–Ω—å:* {verb['level']}

*–ü—Ä–∏–º–µ—Ä:*
_I {verb['infinitive']} here every day._
        """
    
    elif card_type == 'basic_verb':
        verb = random.choice(BASIC_VERBS)
        text = f"""
üé¥ *–ö–∞—Ä—Ç–æ—á–∫–∞: –û—Å–Ω–æ–≤–Ω–æ–π –≥–ª–∞–≥–æ–ª*

üí¨ *–ê–Ω–≥–ª–∏–π—Å–∫–∏–π:* {verb['english']}
üá∑üá∫ *–†—É—Å—Å–∫–∏–π:* {verb['russian']}
üìö *–ü—Ä–∏–º–µ—Ä:* {verb['example']}

*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!*
        """
    
    else:  # phrase
        category = random.choice(list(PHRASES.values()))
        phrase = random.choice(category['phrases'])
        text = f"""
üé¥ *–ö–∞—Ä—Ç–æ—á–∫–∞: –†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞*

üí¨ *–ê–Ω–≥–ª–∏–π—Å–∫–∏–π:* {phrase['english']}
üá∑üá∫ *–†—É—Å—Å–∫–∏–π:* {phrase['russian']}
üìù *–ö–æ–Ω—Ç–µ–∫—Å—Ç:* {phrase['context']}

*–ü–æ–ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–∏!*
        """
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ï—â–µ –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="menu_flashcards")],
        [InlineKeyboardButton("‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    
    if query:
        await query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---

def main():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway.")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("flashcard", send_flashcard))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    application.add_handler(CallbackQueryHandler(handle_main_menu, pattern="^(back_to_main|menu_)"))
    application.add_handler(CallbackQueryHandler(handle_tenses, pattern="^tense_"))
    application.add_handler(CallbackQueryHandler(handle_verbs, pattern="^verbs_"))
    application.add_handler(CallbackQueryHandler(handle_phrases, pattern="^phrases_"))
    application.add_handler(CallbackQueryHandler(send_flashcard, pattern="^menu_flashcards"))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    if os.getenv('RAILWAY_ENVIRONMENT'):
        # –ù–∞ Railway
        PORT = int(os.getenv('PORT', 8443))
        WEBHOOK_URL = os.getenv('WEBHOOK_URL')
        
        if WEBHOOK_URL:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫ –µ—Å–ª–∏ –µ—Å—Ç—å URL
            application.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=BOT_TOKEN,
                webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
            )
        else:
            # –ò–Ω–∞—á–µ –ø–æ–ª–ª–∏–Ω–≥ (–¥–ª—è Railway —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
            logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–∞ Railway...")
            application.run_polling()
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞ –ª–æ–∫–∞–ª—å–Ω–æ...")
        application.run_polling()

if __name__ == '__main__':
    main()
