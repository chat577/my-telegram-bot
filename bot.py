import os
import logging
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ë–ê–ó–ê –î–ê–ù–ù–´–• –°–õ–£–ß–ê–ô–ù–´–• –§–ê–ö–¢–û–í
FACTS = [
    "üêô –û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±—É—é –∫—Ä–æ–≤—å!",
    "üåç –ó–µ–º–ª—è - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞, –Ω–µ –Ω–∞–∑–≤–∞–Ω–Ω–∞—è –≤ —á–µ—Å—Ç—å –±–æ–≥–∞",
    "üçØ –ú–µ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è - –∞—Ä—Ö–µ–æ–ª–æ–≥–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ —Å—ä–µ–¥–æ–±–Ω—ã–π –º–µ–¥ –≤–æ–∑—Ä–∞—Å—Ç–æ–º 3000 –ª–µ—Ç",
    "üêß –ü–∏–Ω–≥–≤–∏–Ω—ã –º–æ–≥—É—Ç –ø—Ä—ã–≥–∞—Ç—å –¥–æ 2 –º–µ—Ç—Ä–æ–≤ –≤ –≤—ã—Å–æ—Ç—É",
    "üìö –í –Ø–ø–æ–Ω–∏–∏ –±–æ–ª–µ–µ 50 –≤–∏–¥–æ–≤ –ø–æ–Ω—á–∏–∫–æ–≤ —Å –≤–∫—É—Å–æ–º –ø–∏—Ü—Ü—ã",
    "‚ö° –ú–æ–ª–Ω–∏—è –º–æ–∂–µ—Ç —É–¥–∞—Ä–∏—Ç—å –≤ –æ–¥–Ω–æ –º–µ—Å—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑",
    "üêå –£–ª–∏—Ç–∫–∏ –º–æ–≥—É—Ç —Å–ø–∞—Ç—å –¥–æ 3 –ª–µ—Ç",
    "üéµ –ö–æ—Ä–æ–≤—ã –º—ã—á–∞—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö"
]

JOKES = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
    "–†–∞–∑–≥–æ–≤–æ—Ä –¥–≤—É—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: - –¢—ã –ø–æ—á–µ–º—É —Ç–∞–∫–æ–π –º–µ–¥–ª–µ–Ω–Ω—ã–π? - –î–∞ RAM'–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç...",
    "–ü–æ—á–µ–º—É Python –Ω–µ –Ω—É–∂–Ω–∞ –æ–¥–µ–∂–¥–∞? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∫–ª–∞—Å—Å—ã!",
    "–ö–∞–∫–æ–π –∫–æ—Ñ–µ –ø—å—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã? Java!",
    "–û–ø—Ç–∏–º–∏—Å—Ç –≤–µ—Ä–∏—Ç, —á—Ç–æ –º—ã –∂–∏–≤–µ–º –≤ –ª—É—á—à–µ–º –∏–∑ –º–∏—Ä–æ–≤. –ü–µ—Å—Å–∏–º–∏—Å—Ç –±–æ–∏—Ç—Å—è, —á—Ç–æ —Ç–∞–∫ –∏ –µ—Å—Ç—å.",
    "–ü–æ—á–µ–º—É –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö!"
]

IDEAS = [
    "üí° –°–æ–∑–¥–∞–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É—á–µ—Ç–∞ –ª–∏—á–Ω—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤",
    "üöÄ –†–∞–∑—Ä–∞–±–æ—Ç–∞–π –±–æ—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞",
    "üé® –°–¥–µ–ª–∞–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º–µ–º–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π",
    "üìä –°–æ–∑–¥–∞–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫",
    "ü§ñ –ù–∞–ø–∏—à–∏ AI-–ø–æ–º–æ—â–Ω–∏–∫–∞ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–Ω—è",
    "üåê –°–¥–µ–ª–∞–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ",
    "üì± –†–∞–∑—Ä–∞–±–æ—Ç–∞–π –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏",
    "üéÆ –°–æ–∑–¥–∞–π –ø—Ä–æ—Å—Ç—É—é –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –∏–≥—Ä—É"
]

ADVICES = [
    "üåü –ù–∞—á–Ω–∏ —Å –º–∞–ª–æ–≥–æ - –±–æ–ª—å—à–∏–µ —Ü–µ–ª–∏ –¥–æ—Å—Ç–∏–≥–∞—é—Ç—Å—è –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —à–∞–≥–∞–º–∏",
    "üí™ –°–µ–≥–æ–¥–Ω—è –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞ - —ç—Ç–æ —É–∂–µ –ø—Ä–æ–≥—Ä–µ—Å—Å!",
    "üéØ –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ –æ–¥–Ω–æ–º –¥–µ–ª–µ –∏ –¥–æ–≤–µ–¥–∏ –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞",
    "üìö –£—á–∏—Å—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —á–µ–º—É-—Ç–æ –Ω–æ–≤–æ–º—É",
    "üöÄ –ù–µ –±–æ–π—Å—è –æ—à–∏–±–æ–∫ - –æ–Ω–∏ –≤–µ–¥—É—Ç –∫ —Ä–æ—Å—Ç—É",
    "‚è∞ –ü–ª–∞–Ω–∏—Ä—É–π —Å–≤–æ–π –¥–µ–Ω—å —Å –≤–µ—á–µ—Ä–∞",
    "üé™ –ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–¥—ã—Ö–∞ - –∫–ª—é—á –∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
    "ü§ù –û–∫—Ä—É–∂–∞–π —Å–µ–±—è –ª—é–¥—å–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç"
]

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_inline_keyboard():
    keyboard = [
        [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data="start_cmd")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info_cmd")],
        [InlineKeyboardButton("üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", callback_data="generator_cmd")],
        [InlineKeyboardButton("üìû –ü–æ–º–æ—â—å", callback_data="help_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_generator_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç", callback_data="gen_fact")],
        [InlineKeyboardButton("üòÇ –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞", callback_data="gen_joke")],
        [InlineKeyboardButton("üí° –ò–¥–µ—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞", callback_data="gen_idea")],
        [InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ", callback_data="gen_number")],
        [InlineKeyboardButton("üåü –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç", callback_data="gen_advice")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
def generate_fact():
    return random.choice(FACTS)

def generate_joke():
    return random.choice(JOKES)

def generate_idea():
    return random.choice(IDEAS)

def generate_number():
    return f"üé≤ –í–∞—à–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: **{random.randint(1, 100)}**"

def generate_advice():
    return random.choice(ADVICES)

def generate_password():
    length = random.randint(8, 12)
    chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*"
    password = ''.join(random.choice(chars) for _ in range(length))
    return f"üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: `{password}`"

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_main_inline_keyboard()
    await update.message.reply_text(
        'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø —É–º–µ—é –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç!\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard
    )

async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_back_keyboard()
    await update.message.reply_text(
        'ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**\n\n'
        '‚Ä¢ –°–æ–∑–¥–∞–Ω –Ω–∞ Python\n‚Ä¢ –•–æ—Å—Ç–∏—Ç—Å—è –Ω–∞ Railway\n‚Ä¢ –£–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:\n'
        '  üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–∫—Ç—ã\n  üòÇ –®—É—Ç–∫–∏\n  üí° –ò–¥–µ–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤\n  üéØ –ß–∏—Å–ª–∞\n  üåü –°–æ–≤–µ—Ç—ã\n  üîê –ü–∞—Ä–æ–ª–∏\n\n'
        '‚úÖ –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ!',
        reply_markup=keyboard
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_back_keyboard()
    await update.message.reply_text(
        'üìû **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n'
        '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
        '/fact - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n'
        '/joke - —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞\n'
        '/idea - –∏–¥–µ—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞\n'
        '/number - —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ\n'
        '/advice - —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç\n'
        '/password - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å\n'
        '/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n'
        '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ‚Üì',
        reply_markup=keyboard
    )

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—ã
async def fact_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(generate_fact())

async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(generate_joke())

async def idea_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(generate_idea())

async def number_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(generate_number(), parse_mode='Markdown')

async def advice_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(generate_advice())

async def password_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(generate_password(), parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "start_cmd":
        keyboard = get_main_inline_keyboard()
        await query.edit_message_text(
            'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?',
            reply_markup=keyboard
        )
    
    elif data == "info_cmd":
        keyboard = get_back_keyboard()
        await query.edit_message_text(
            'ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**\n\n'
            '‚Ä¢ –°–æ–∑–¥–∞–Ω –Ω–∞ Python\n‚Ä¢ –•–æ—Å—Ç–∏—Ç—Å—è –Ω–∞ Railway\n‚Ä¢ –£–º–µ–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:\n'
            '  üé≤ –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–∫—Ç—ã\n  üòÇ –®—É—Ç–∫–∏\n  üí° –ò–¥–µ–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤\n  üéØ –ß–∏—Å–ª–∞\n  üåü –°–æ–≤–µ—Ç—ã\n  üîê –ü–∞—Ä–æ–ª–∏\n\n'
            '‚úÖ –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ!',
            reply_markup=keyboard
        )
    
    elif data == "generator_cmd":
        keyboard = get_generator_keyboard()
        await query.edit_message_text(
            'üé≤ **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:',
            reply_markup=keyboard
        )
    
    elif data == "help_cmd":
        keyboard = get_back_keyboard()
        await query.edit_message_text(
            'üìû **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n'
            '/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n'
            '/fact - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n'
            '/joke - —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞\n'
            '/idea - –∏–¥–µ—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞\n'
            '/number - —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ\n'
            '/advice - —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç\n'
            '/password - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä–æ–ª—å\n'
            '/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n'
            '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ‚Üì',
            reply_markup=keyboard
        )
    
    elif data == "gen_fact":
        keyboard = get_generator_keyboard()
        await query.edit_message_text(
            f'{generate_fact()}\n\n'
            '–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?',
            reply_markup=keyboard
        )
    
    elif data == "gen_joke":
        keyboard = get_generator_keyboard()
        await query.edit_message_text(
            f'{generate_joke()}\n\n'
            '–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?',
            reply_markup=keyboard
        )
    
    elif data == "gen_idea":
        keyboard = get_generator_keyboard()
        await query.edit_message_text(
            f'{generate_idea()}\n\n'
            '–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?',
            reply_markup=keyboard
        )
    
    elif data == "gen_number":
        keyboard = get_generator_keyboard()
        await query.edit_message_text(
            f'{generate_number()}\n\n'
            '–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?',
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    elif data == "gen_advice":
        keyboard = get_generator_keyboard()
        await query.edit_message_text(
            f'{generate_advice()}\n\n'
            '–•–æ—Ç–∏—Ç–µ –µ—â–µ —á—Ç–æ-—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å?',
            reply_markup=keyboard
        )
    
    elif data == "back_cmd":
        keyboard = get_main_inline_keyboard()
        await query.edit_message_text(
            'üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if any(word in text for word in ['—Ñ–∞–∫—Ç', 'fact']):
        await update.message.reply_text(generate_fact())
    elif any(word in text for word in ['—à—É—Ç–∫–∞', '–∞–Ω–µ–∫–¥–æ—Ç', 'joke']):
        await update.message.reply_text(generate_joke())
    elif any(word in text for word in ['–∏–¥–µ—è', '–ø—Ä–æ–µ–∫—Ç', 'idea']):
        await update.message.reply_text(generate_idea())
    elif any(word in text for word in ['—á–∏—Å–ª–æ', '–Ω–æ–º–µ—Ä', 'number']):
        await update.message.reply_text(generate_number(), parse_mode='Markdown')
    elif any(word in text for word in ['—Å–æ–≤–µ—Ç', 'advice']):
        await update.message.reply_text(generate_advice())
    elif any(word in text for word in ['–ø–∞—Ä–æ–ª—å', 'password']):
        await update.message.reply_text(generate_password(), parse_mode='Markdown')
    else:
        keyboard = get_main_inline_keyboard()
        await update.message.reply_text(
            '–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å üòä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:',
            reply_markup=keyboard
        )

def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("info", info_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("fact", fact_command))
        application.add_handler(CommandHandler("joke", joke_command))
        application.add_handler(CommandHandler("idea", idea_command))
        application.add_handler(CommandHandler("number", number_command))
        application.add_handler(CommandHandler("advice", advice_command))
        application.add_handler(CommandHandler("password", password_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
