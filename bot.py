import os
import logging
import random
import aiohttp
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

class EnglishParser:
    def __init__(self):
        self.session = None
        
    async def get_session(self):
        if self.session is None:
            self.session = aiohttp.ClientSession()
        return self.session
    
    async def close_session(self):
        if self.session:
            await self.session.close()
            self.session = None
    
    async def parse_verb(self, verb):
        """–ü–∞—Ä—Å–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≥–æ–ª–µ —Å lingvolive"""
        try:
            session = await self.get_session()
            url = f"https://www.lingvolive.com/ru-ru/translate/en-ru/{verb}"
            
            async with session.get(url) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'lxml')
                    
                    # –ò—â–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –ø–µ—Ä–µ–≤–æ–¥
                    transcription = ""
                    translation = ""
                    
                    # –ü—Ä–∏–º–µ—Ä –ø–∞—Ä—Å–∏–Ω–≥–∞ (–Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞)
                    trans_elem = soup.find('span', class_='transcription')
                    if trans_elem:
                        transcription = trans_elem.text
                    
                    trans_elem = soup.find('span', class_='translation')
                    if trans_elem:
                        translation = trans_elem.text
                    
                    return {
                        'verb': verb,
                        'transcription': transcription or "[—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è]",
                        'translation': translation or "[–ø–µ—Ä–µ–≤–æ–¥]",
                        'source': 'lingvolive'
                    }
        except Exception as e:
            logger.error(f"Error parsing verb {verb}: {e}")
        
        return None
    
    async def parse_phrase(self, phrase_type):
        """–ü–∞—Ä—Å–∏—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã"""
        phrases_db = {
            "greetings": [
                "Hello", "Hi", "Good morning", "Good afternoon", "Good evening"
            ],
            "introduction": [
                "My name is", "I am from", "Nice to meet you", "How are you"
            ],
            "questions": [
                "What is this", "Where is", "How much", "Can you help me"
            ]
        }
        
        phrases = phrases_db.get(phrase_type, [])
        results = []
        
        for phrase in phrases:
            try:
                session = await self.get_session()
                url = f"https://www.lingvolive.com/ru-ru/translate/en-ru/{phrase.replace(' ', '+')}"
                
                async with session.get(url) as response:
                    if response.status == 200:
                        html = await response.text()
                        soup = BeautifulSoup(html, 'lxml')
                        
                        translation_elem = soup.find('span', class_='translation')
                        translation = translation_elem.text if translation_elem else "[–ø–µ—Ä–µ–≤–æ–¥]"
                        
                        results.append({
                            'english': phrase,
                            'russian': translation,
                            'context': "–†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞"
                        })
            except Exception as e:
                logger.error(f"Error parsing phrase {phrase}: {e}")
                results.append({
                    'english': phrase,
                    'russian': "[–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥]",
                    'context': "–†–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è —Ñ—Ä–∞–∑–∞"
                })
        
        return results

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
parser = EnglishParser()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìö –í—Ä–µ–º–µ–Ω–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏", callback_data="menu_tenses")],
        [InlineKeyboardButton("üî§ –ì–ª–∞–≥–æ–ª—ã —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º", callback_data="menu_verbs")],
        [InlineKeyboardButton("üí¨ –§—Ä–∞–∑—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º", callback_data="menu_phrases")],
        [InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data="random_word")],
        [InlineKeyboardButton("üìñ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", callback_data="exercise")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_verbs_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üéØ –¢–æ–ø-–≥–ª–∞–≥–æ–ª—ã", callback_data="verbs_top")],
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –≥–ª–∞–≥–æ–ª", callback_data="verbs_search")],
        [InlineKeyboardButton("üìä –ü–æ —Ç–µ–º–∞–º", callback_data="verbs_themes")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_phrases_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data="phrases_greetings")],
        [InlineKeyboardButton("ü§ù –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data="phrases_introduction")],
        [InlineKeyboardButton‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="phrases_questions")],
        [InlineKeyboardButton("‚òï –ö–∞—Ñ–µ/–†–µ—Å—Ç–æ—Ä–∞–Ω", callback_data="phrases_cafe")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üá¨üáß *English Helper - –£–º–Ω—ã–π –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!* üá∫üá∏

‚ú® *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:*
‚Ä¢ üìö –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∞–π—Ç–æ–≤
‚Ä¢ üî§ –†–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚Ä¢ üéØ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
‚Ä¢ üí¨ –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º

*–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞—à–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è!*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:
    """
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

async def handle_verbs_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    text = """
üîç *–ü–æ–∏—Å–∫ –≥–ª–∞–≥–æ–ª–∞*

–í–≤–µ–¥–∏—Ç–µ –≥–ª–∞–≥–æ–ª –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∏ —è –Ω–∞–π–¥—É:
‚Ä¢ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥
‚Ä¢ –§–æ—Ä–º—ã (–¥–ª—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö)

*–ü—Ä–∏–º–µ—Ä:* `/verb go` –∏–ª–∏ `/verb be`

–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö:
"""
    
    keyboard = [
        [InlineKeyboardButton("be", callback_data="verb_be"),
        [InlineKeyboardButton("have", callback_data="verb_have")],
        [InlineKeyboardButton("do", callback_data="verb_do")],
        [InlineKeyboardButton("go", callback_data="verb_go")],
        [InlineKeyboardButton("see", callback_data="verb_see")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_verbs")],
    ]
    
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_verb_detail(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    verb = query.data.replace("verb_", "")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await query.edit_message_text(
        text=f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≥–æ–ª–µ *{verb}*...",
        parse_mode='Markdown'
    )
    
    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    verb_info = await parser.parse_verb(verb)
    
    if verb_info:
        text = f"""
üî§ *–ì–ª–∞–≥–æ–ª: {verb_info['verb']}*

üìù *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:* {verb_info['transcription']}
üá∑üá∫ *–ü–µ—Ä–µ–≤–æ–¥:* {verb_info['translation']}
üìö *–ò—Å—Ç–æ—á–Ω–∏–∫:* {verb_info['source']}

üí° *–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
‚Ä¢ I {verb} every day
‚Ä¢ She {verb}s to school
‚Ä¢ They {verb}ed yesterday

üéØ *–°–æ–≤–µ—Ç:* –°–æ—Å—Ç–∞–≤—å—Ç–µ 3 —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º –≥–ª–∞–≥–æ–ª–æ–º!
        """
    else:
        text = f"""
üî§ *–ì–ª–∞–≥–æ–ª: {verb}*

‚ö†Ô∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*

*–ë–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º—ã:*
‚Ä¢ Infinitive: {verb}
‚Ä¢ Past Simple: [{verb}ed –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞]
‚Ä¢ Past Participle: [{verb}ed –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞]

üí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –≥–ª–∞–≥–æ–ª –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏!
        """
    
    keyboard = [
        [InlineKeyboardButton("üîç –î—Ä—É–≥–æ–π –≥–ª–∞–≥–æ–ª", callback_data="verbs_search")],
        [InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")],
    ]
    
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_phrases(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    phrase_type = query.data.replace("phrases_", "")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await query.edit_message_text(
        text=f"üîç –ó–∞–≥—Ä—É–∂–∞—é {phrase_type}...",
        parse_mode='Markdown'
    )
    
    # –ü–∞—Ä—Å–∏–º —Ñ—Ä–∞–∑—ã
    phrases = await parser.parse_phrase(phrase_type)
    
    if phrases:
        text = f"üí¨ *{phrase_type.upper()}*\n\n"
        for phrase in phrases[:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            text += f"‚Ä¢ *{phrase['english']}* - {phrase['russian']}\n"
            text += f"  _{phrase['context']}_\n\n"
    else:
        # –†–µ–∑–µ—Ä–≤–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        backup_phrases = {
            "greetings": [
                {"english": "Hello", "russian": "–ü—Ä–∏–≤–µ—Ç", "context": "–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"},
                {"english": "Good morning", "russian": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "context": "–£—Ç—Ä–µ–Ω–Ω–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"},
            ],
            "introduction": [
                {"english": "My name is", "russian": "–ú–µ–Ω—è –∑–æ–≤—É—Ç", "context": "–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ"},
                {"english": "I am from", "russian": "–Ø –∏–∑", "context": "–£–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è"},
            ]
        }
        
        phrases = backup_phrases.get(phrase_type, [])
        text = f"üí¨ *{phrase_type.upper()}*\n\n"
        for phrase in phrases:
            text += f"‚Ä¢ *{phrase['english']}* - {phrase['russian']}\n"
            text += f"  _{phrase['context']}_\n\n"
    
    text += "üí° *–ü—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç–µ –≤—Å–ª—É—Ö –¥–ª—è –ø—Ä–∞–∫—Ç–∏–∫–∏!*"
    
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=get_phrases_menu_keyboard()
    )

async def random_word_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º"""
    popular_words = ["hello", "time", "people", "water", "food", "house", "city", "car", "book", "friend"]
    word = random.choice(popular_words)
    
    word_info = await parser.parse_verb(word)
    
    if word_info:
        text = f"""
üéØ *–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è!*

üìñ *–°–ª–æ–≤–æ:* {word_info['verb']}
üìù *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:* {word_info['transcription']}
üá∑üá∫ *–ü–µ—Ä–µ–≤–æ–¥:* {word_info['translation']}

*–°–æ—Å—Ç–∞–≤—å—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º!*
        """
    else:
        text = f"""
üéØ *–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–Ω—è!*

üìñ *–°–ª–æ–≤–æ:* {word}
üá∑üá∫ *–ü–µ—Ä–µ–≤–æ–¥:* [–ø–æ–ø—É–ª—è—Ä–Ω–æ–µ —Å–ª–æ–≤–æ]

*–ü—Ä–∏–º–µ—Ä:* I like this {word}!
        """
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ", callback_data="random_word")],
        [InlineKeyboardButton("üìö –í—Å–µ —Ä–∞–∑–¥–µ–ª—ã", callback_data="back_to_main")],
    ]
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            text=text,
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≥–ª–∞–≥–æ–ª–∞
async def verb_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–ª–∞–≥–æ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: `/verb go`")
        return
    
    verb = context.args[0].lower()
    
    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≥–æ–ª–µ
    verb_info = await parser.parse_verb(verb)
    
    if verb_info:
        text = f"""
üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:*

üìñ *–ì–ª–∞–≥–æ–ª:* {verb_info['verb']}
üìù *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:* {verb_info['transcription']}
üá∑üá∫ *–ü–µ—Ä–µ–≤–æ–¥:* {verb_info['translation']}
üîó *–ò—Å—Ç–æ—á–Ω–∏–∫:* {verb_info['source']}

üí° *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö!*
        """
    else:
        text = f"""
üîç *–ì–ª–∞–≥–æ–ª:* {verb}

‚ö†Ô∏è *–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é*

*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:*
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—É—é —Ñ–æ—Ä–º—É
‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–ª–∞–≥–æ–ª

üí° *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* I want to {verb}
        """
    
    await update.message.reply_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é
async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "back_to_main":
        text = "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        keyboard = get_main_menu_keyboard()
    
    elif callback_data == "menu_verbs":
        text = "üî§ *–ò–∑—É—á–µ–Ω–∏–µ –≥–ª–∞–≥–æ–ª–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:"
        keyboard = get_verbs_menu_keyboard()
    
    elif callback_data == "menu_phrases":
        text = "üí¨ *–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        keyboard = get_phrases_menu_keyboard()
    
    elif callback_data == "verbs_search":
        return await handle_verbs_search(update, context)
    
    elif callback_data.startswith("verb_"):
        return await handle_verb_detail(update, context)
    
    elif callback_data.startswith("phrases_"):
        return await handle_phrases(update, context)
    
    elif callback_data == "random_word":
        return await random_word_command(update, context)
    
    elif callback_data == "menu_tenses":
        text = """
üìö *–ê–Ω–≥–ª–∏–π—Å–∫–∏–µ –≤—Ä–µ–º–µ–Ω–∞*

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏:*

üü¢ *Present Simple*
`I work every day` - –Ø —Ä–∞–±–æ—Ç–∞—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å

üîµ *Present Continuous*  
`I am working now` - –Ø —Ä–∞–±–æ—Ç–∞—é —Å–µ–π—á–∞—Å

üü† *Past Simple*
`I worked yesterday` - –Ø —Ä–∞–±–æ—Ç–∞–ª –≤—á–µ—Ä–∞

üü£ *Future Simple*
`I will work tomorrow` - –Ø –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≤—Ç—Ä–∞

üí° *–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:* `/tense present_simple`
        """
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    
    else:
        return
    
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=keyboard
    )

def main():
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("verb", verb_command))
    application.add_handler(CommandHandler("word", random_word_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    application.add_handler(CallbackQueryHandler(handle_main_menu))
    
    # –ó–∞–ø—É—Å–∫
    if os.getenv('RAILWAY_ENVIRONMENT'):
        PORT = int(os.getenv('PORT', 8443))
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=BOT_TOKEN,
            webhook_url=f"https://{os.getenv('RAILWAY_STATIC_URL', '')}/{BOT_TOKEN}"
        )
    else:
        application.run_polling()

if __name__ == '__main__':
    main()
