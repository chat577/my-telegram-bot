import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ë—É–¥–µ–º –±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Railway
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_inline_keyboard():
    keyboard = [
        [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data="start_cmd")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info_cmd")],
        [InlineKeyboardButton("üìû –ü–æ–º–æ—â—å", callback_data="help_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
def get_back_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_main_inline_keyboard()
    await update.message.reply_text(
        'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ /info
async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_back_keyboard()
    await update.message.reply_text(
        'ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**\n\n'
        '‚Ä¢ –°–æ–∑–¥–∞–Ω –Ω–∞ Python\n'
        '‚Ä¢ –•–æ—Å—Ç–∏—Ç—Å—è –Ω–∞ Railway\n'
        '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç python-telegram-bot\n'
        '‚Ä¢ –ò–º–µ–µ—Ç inline-–∫–Ω–æ–ø–∫–∏\n\n'
        '‚úÖ –ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –≤–µ–± –∏ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏—è—Ö!',
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_back_keyboard()
    await update.message.reply_text(
        'üìû **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**\n\n'
        '/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n'
        '/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
        '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n'
        '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ‚Üì',
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—Ç–∏–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    
    data = query.data
    
    if data == "start_cmd":
        keyboard = get_main_inline_keyboard()
        await query.edit_message_text(
            'üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n'
            '–≠—Ç–æ –≤–∞—à–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏.\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:',
            reply_markup=keyboard
        )
    
    elif data == "info_cmd":
        keyboard = get_back_keyboard()
        await query.edit_message_text(
            'ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**\n\n'
            '‚Ä¢ –°–æ–∑–¥–∞–Ω –Ω–∞ Python\n'
            '‚Ä¢ –•–æ—Å—Ç–∏—Ç—Å—è –Ω–∞ Railway\n'
            '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç python-telegram-bot\n'
            '‚Ä¢ –ò–º–µ–µ—Ç inline-–∫–Ω–æ–ø–∫–∏\n\n'
            '‚úÖ –ö–Ω–æ–ø–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –≤–µ–± –∏ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏—è—Ö!',
            reply_markup=keyboard
        )
    
    elif data == "help_cmd":
        keyboard = get_back_keyboard()
        await query.edit_message_text(
            'üìû **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**\n\n'
            '/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n'
            '/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
            '/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n'
            '–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ ‚Üì',
            reply_markup=keyboard
        )
    
    elif data == "back_cmd":
        keyboard = get_main_inline_keyboard()
        await query.edit_message_text(
            'üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –ë–ï–ó –ö–ù–û–ü–û–ö –ü–û–î –ü–û–õ–ï–ú –í–í–û–î–ê
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó reply_markup
    await update.message.reply_text(
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n'
        '/start - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n'
        '/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n'
        '/help - —Å–ø—Ä–∞–≤–∫–∞\n\n'
        '–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.'
    )

def main():
    try:
        # –°–æ–∑–¥–∞–µ–º Application
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("info", info_command))
        application.add_handler(CommandHandler("help", help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
        application.add_handler(CallbackQueryHandler(button_handler))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
