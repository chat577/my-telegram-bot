import os
import logging
import random
import aiohttp
import requests
from bs4 import BeautifulSoup
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from dotenv import load_dotenv

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()

class EnglishAPI:
    def __init__(self):
        self.session = None
    
    async def get_verb_info(self, verb):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≥–æ–ª–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
        try:
            # –ü–æ–ø—Ä–æ–±—É–µ–º Free Dictionary API
            async with aiohttp.ClientSession() as session:
                url = f"https://api.dictionaryapi.dev/api/v2/entries/en/{verb}"
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        return self._parse_dictionary_response(verb, data)
        except Exception as e:
            logger.error(f"Dictionary API error: {e}")
        
        # –ï—Å–ª–∏ API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
        return self._get_local_verb_info(verb)
    
    def _parse_dictionary_response(self, verb, data):
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –æ—Ç Dictionary API"""
        if not data:
            return None
        
        word_data = data[0]
        result = {
            'word': verb,
            'phonetic': '',
            'meanings': [],
            'source': 'Dictionary API'
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        if 'phonetic' in word_data:
            result['phonetic'] = word_data['phonetic']
        elif 'phonetics' in word_data and word_data['phonetics']:
            for phonetics in word_data['phonetics']:
                if 'text' in phonetics:
                    result['phonetic'] = phonetics['text']
                    break
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–≤–æ–¥—ã
        for meaning in word_data.get('meanings', []):
            part_of_speech = meaning.get('partOfSpeech', '')
            for definition in meaning.get('definitions', []):
                def_text = definition.get('definition', '')
                example = definition.get('example', '')
                
                # –ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å)
                translation = self._simple_translate(def_text)
                
                result['meanings'].append({
                    'partOfSpeech': part_of_speech,
                    'definition': def_text,
                    'translation': translation,
                    'example': example
                })
        
        return result
    
    def _simple_translate(self, text):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É"""
        common_words = {
            'be': '–±—ã—Ç—å',
            'have': '–∏–º–µ—Ç—å',
            'do': '–¥–µ–ª–∞—Ç—å',
            'say': '–≥–æ–≤–æ—Ä–∏—Ç—å',
            'get': '–ø–æ–ª—É—á–∞—Ç—å',
            'make': '–¥–µ–ª–∞—Ç—å',
            'go': '–∏–¥—Ç–∏',
            'know': '–∑–Ω–∞—Ç—å',
            'take': '–±—Ä–∞—Ç—å',
            'see': '–≤–∏–¥–µ—Ç—å',
            'come': '–ø—Ä–∏—Ö–æ–¥–∏—Ç—å',
            'think': '–¥—É–º–∞—Ç—å',
            'look': '—Å–º–æ—Ç—Ä–µ—Ç—å',
            'want': '—Ö–æ—Ç–µ—Ç—å',
            'give': '–¥–∞–≤–∞—Ç—å',
            'use': '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å',
            'find': '–Ω–∞—Ö–æ–¥–∏—Ç—å',
            'tell': '—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å',
            'ask': '—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å',
            'work': '—Ä–∞–±–æ—Ç–∞—Ç—å',
            'seem': '–∫–∞–∑–∞—Ç—å—Å—è',
            'feel': '—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å',
            'try': '–ø—ã—Ç–∞—Ç—å—Å—è',
            'leave': '–ø–æ–∫–∏–¥–∞—Ç—å',
            'call': '–∑–≤–æ–Ω–∏—Ç—å'
        }
        
        # –ò—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
        for word, translation in common_words.items():
            if word in text.lower():
                return translation
        return "–ø–µ—Ä–µ–≤–æ–¥"
    
    def _get_local_verb_info(self, verb):
        """–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –≥–ª–∞–≥–æ–ª–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π"""
        verbs_db = {
            'be': {'phonetic': '/biÀê/', 'translation': '–±—ã—Ç—å', 'past': 'was/were', 'participle': 'been'},
            'have': {'phonetic': '/h√¶v/', 'translation': '–∏–º–µ—Ç—å', 'past': 'had', 'participle': 'had'},
            'do': {'phonetic': '/duÀê/', 'translation': '–¥–µ–ª–∞—Ç—å', 'past': 'did', 'participle': 'done'},
            'say': {'phonetic': '/se…™/', 'translation': '–≥–æ–≤–æ—Ä–∏—Ç—å', 'past': 'said', 'participle': 'said'},
            'get': {'phonetic': '/…°et/', 'translation': '–ø–æ–ª—É—á–∞—Ç—å', 'past': 'got', 'participle': 'got/gotten'},
            'make': {'phonetic': '/me…™k/', 'translation': '–¥–µ–ª–∞—Ç—å', 'past': 'made', 'participle': 'made'},
            'go': {'phonetic': '/…°o ä/', 'translation': '–∏–¥—Ç–∏', 'past': 'went', 'participle': 'gone'},
            'know': {'phonetic': '/no ä/', 'translation': '–∑–Ω–∞—Ç—å', 'past': 'knew', 'participle': 'known'},
            'take': {'phonetic': '/te…™k/', 'translation': '–±—Ä–∞—Ç—å', 'past': 'took', 'participle': 'taken'},
            'see': {'phonetic': '/siÀê/', 'translation': '–≤–∏–¥–µ—Ç—å', 'past': 'saw', 'participle': 'seen'},
            'come': {'phonetic': '/k åm/', 'translation': '–ø—Ä–∏—Ö–æ–¥–∏—Ç—å', 'past': 'came', 'participle': 'come'},
            'think': {'phonetic': '/Œ∏…™≈ãk/', 'translation': '–¥—É–º–∞—Ç—å', 'past': 'thought', 'participle': 'thought'},
            'look': {'phonetic': '/l äk/', 'translation': '—Å–º–æ—Ç—Ä–µ—Ç—å', 'past': 'looked', 'participle': 'looked'},
            'want': {'phonetic': '/w…ínt/', 'translation': '—Ö–æ—Ç–µ—Ç—å', 'past': 'wanted', 'participle': 'wanted'},
            'give': {'phonetic': '/…°…™v/', 'translation': '–¥–∞–≤–∞—Ç—å', 'past': 'gave', 'participle': 'given'},
            'use': {'phonetic': '/juÀêz/', 'translation': '–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å', 'past': 'used', 'participle': 'used'},
            'find': {'phonetic': '/fa…™nd/', 'translation': '–Ω–∞—Ö–æ–¥–∏—Ç—å', 'past': 'found', 'participle': 'found'},
            'tell': {'phonetic': '/tel/', 'translation': '—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å', 'past': 'told', 'participle': 'told'},
            'ask': {'phonetic': '/√¶sk/', 'translation': '—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å', 'past': 'asked', 'participle': 'asked'},
            'work': {'phonetic': '/w…úÀêrk/', 'translation': '—Ä–∞–±–æ—Ç–∞—Ç—å', 'past': 'worked', 'participle': 'worked'},
        }
        
        if verb in verbs_db:
            return {
                'word': verb,
                'phonetic': verbs_db[verb]['phonetic'],
                'meanings': [{
                    'partOfSpeech': 'verb',
                    'definition': f'to {verb}',
                    'translation': verbs_db[verb]['translation'],
                    'example': f'I {verb} every day'
                }],
                'past': verbs_db[verb]['past'],
                'participle': verbs_db[verb]['participle'],
                'source': 'Local Database'
            }
        
        return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
english_api = EnglishAPI()

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üî§ –ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ/–≥–ª–∞–≥–æ–ª", callback_data="search_word")],
        [InlineKeyboardButton("üìö –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã", callback_data="popular_verbs")],
        [InlineKeyboardButton("üí¨ –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã", callback_data="common_phrases")],
        [InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data="random_word")],
        [InlineKeyboardButton("üìñ –ì—Ä–∞–º–º–∞—Ç–∏–∫–∞", callback_data="grammar")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_verbs_keyboard():
    keyboard = [
        [InlineKeyboardButton("be", callback_data="verb_be"), InlineKeyboardButton("have", callback_data="verb_have")],
        [InlineKeyboardButton("do", callback_data="verb_do"), InlineKeyboardButton("go", callback_data="verb_go")],
        [InlineKeyboardButton("see", callback_data="verb_see"), InlineKeyboardButton("say", callback_data="verb_say")],
        [InlineKeyboardButton("get", callback_data="verb_get"), InlineKeyboardButton("make", callback_data="verb_make")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_phrases_keyboard():
    keyboard = [
        [InlineKeyboardButton("üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data="phrases_greetings")],
        [InlineKeyboardButton("ü§ù –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", callback_data="phrases_introduction")],
        [InlineKeyboardButton("‚òï –í –∫–∞—Ñ–µ", callback_data="phrases_cafe")],
        [InlineKeyboardButton("‚ùì –í–æ–ø—Ä–æ—Å—ã", callback_data="phrases_questions")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_grammar_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìù Present Simple", callback_data="grammar_present_simple")],
        [InlineKeyboardButton("‚è≥ Present Continuous", callback_data="grammar_present_continuous")],
        [InlineKeyboardButton("üï∞Ô∏è Past Simple", callback_data="grammar_past_simple")],
        [InlineKeyboardButton("üîÆ Future Simple", callback_data="grammar_future_simple")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ]
    return InlineKeyboardMarkup(keyboard)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """
üá¨üáß *English Learning Bot* üá∫üá∏

*–£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!*

‚ú® *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üî§ –ü–æ–∏—Å–∫ —Å–ª–æ–≤ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–º
‚Ä¢ üìö –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã —Å —Ñ–æ—Ä–º–∞–º–∏
‚Ä¢ üí¨ –ü–æ–ª–µ–∑–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã
‚Ä¢ üìñ –û–±—ä—è—Å–Ω–µ–Ω–∏—è –≥—Ä–∞–º–º–∞—Ç–∏–∫–∏
‚Ä¢ üéØ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

*–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*
    """
    
    await update.message.reply_text(
        welcome_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üìñ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞  
/word <—Å–ª–æ–≤–æ> - –ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ
/verb <–≥–ª–∞–≥–æ–ª> - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–ª–∞–≥–æ–ª–µ
/random - –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ

*–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –ù–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!

üí° *–°–æ–≤–µ—Ç—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:*
1. –£—á–∏—Ç–µ –ø–æ 5-10 —Å–ª–æ–≤ –≤ –¥–µ–Ω—å
2. –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
3. –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ
4. –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ

*–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ!* üöÄ
    """
    
    await update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ---
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "back_to_main":
        await show_main_menu(query)
    
    elif callback_data == "search_word":
        await search_word_handler(query)
    
    elif callback_data == "popular_verbs":
        await popular_verbs_handler(query)
    
    elif callback_data == "common_phrases":
        await common_phrases_handler(query)
    
    elif callback_data == "random_word":
        await random_word_handler(query)
    
    elif callback_data == "grammar":
        await grammar_handler(query)
    
    elif callback_data == "help":
        await help_handler(query)
    
    elif callback_data.startswith("verb_"):
        await verb_detail_handler(query, callback_data.replace("verb_", ""))
    
    elif callback_data.startswith("phrases_"):
        await phrases_handler(query, callback_data.replace("phrases_", ""))
    
    elif callback_data.startswith("grammar_"):
        await grammar_detail_handler(query, callback_data.replace("grammar_", ""))

async def show_main_menu(query):
    text = "üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=get_main_menu_keyboard()
    )

async def search_word_handler(query):
    text = """
üîç *–ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞ –∏–ª–∏ –≥–ª–∞–≥–æ–ª–∞*

–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∏ —è –Ω–∞–π–¥—É:
‚Ä¢ üìù –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é (–ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ)
‚Ä¢ üá∑üá∫ –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
‚Ä¢ üìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:*
`/word hello` - –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ
`/verb go` - –Ω–∞–π—Ç–∏ –≥–ª–∞–≥–æ–ª

*–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≥–ª–∞–≥–æ–ª—ã:*
    """
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=get_verbs_keyboard()
    )

async def popular_verbs_handler(query):
    text = """
üìö *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –≥–ª–∞–≥–æ–ª—ã*

–í—ã–±–µ—Ä–∏—Ç–µ –≥–ª–∞–≥–æ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:

*–¢–æ–ø-10 —Å–∞–º—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≥–ª–∞–≥–æ–ª–æ–≤:*
"""
    verbs = ["be", "have", "do", "say", "get", "make", "go", "know", "take", "see"]
    for i, verb in enumerate(verbs, 1):
        text += f"{i}. *{verb}* - –±–∞–∑–æ–≤—ã–π –≥–ª–∞–≥–æ–ª\n"
    
    text += "\nüí° *–°–æ–≤–µ—Ç:* –≠—Ç–∏ –≥–ª–∞–≥–æ–ª—ã –ø–æ–∫—Ä—ã–≤–∞—é—Ç 50% –≤—Å–µ–π –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–µ—á–∏!"
    
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=get_verbs_keyboard()
    )

async def common_phrases_handler(query):
    text = """
üí¨ *–†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ—Ä–∞–∑—ã*

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è:
"""
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=get_phrases_keyboard()
    )

async def random_word_handler(query):
    words = [
        {"word": "hello", "translation": "–ø—Ä–∏–≤–µ—Ç", "example": "Hello! How are you?"},
        {"word": "beautiful", "translation": "–∫—Ä–∞—Å–∏–≤—ã–π", "example": "What a beautiful day!"},
        {"word": "important", "translation": "–≤–∞–∂–Ω—ã–π", "example": "This is very important."},
        {"word": "understand", "translation": "–ø–æ–Ω–∏–º–∞—Ç—å", "example": "I understand you."},
        {"word": "different", "translation": "—Ä–∞–∑–Ω—ã–π", "example": "We are different."},
    ]
    
    word = random.choice(words)
    
    text = f"""
üéØ *–°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è!*

üìñ *–°–ª–æ–≤–æ:* {word['word']}
üá∑üá∫ *–ü–µ—Ä–µ–≤–æ–¥:* {word['translation']}
üí° *–ü—Ä–∏–º–µ—Ä:* {word['example']}

*–ü—Ä–∞–∫—Ç–∏–∫–∞:* –°–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å —ç—Ç–∏–º —Å–ª–æ–≤–æ–º!

üîÑ *–û–±–Ω–æ–≤–∏—Ç—å —Å–ª–æ–≤–æ:* /random
    """
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="random_word")],
        [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–ª–æ–≤–æ", callback_data="search_word")],
        [InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")],
    ]
    
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def grammar_handler(query):
    text = """
üìñ *–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞*

–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:*
‚Ä¢ üìù Present Simple - —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ ‚è≥ Present Continuous - –¥–µ–π—Å—Ç–≤–∏—è —Å–µ–π—á–∞—Å  
‚Ä¢ üï∞Ô∏è Past Simple - –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
‚Ä¢ üîÆ Future Simple - –±—É–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è

üí° *–ö–∞–∂–¥–æ–µ –≤—Ä–µ–º—è –≤–∫–ª—é—á–∞–µ—Ç:*
- –ü—Ä–∞–≤–∏–ª–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
- –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –°–ª–æ–≤–∞-–º–∞—Ä–∫–µ—Ä—ã
- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    """
    
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=get_grammar_keyboard()
    )

async def help_handler(query):
    text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*

*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
üî§ *–ü–æ–∏—Å–∫ —Å–ª–æ–≤* - —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –ø–µ—Ä–µ–≤–æ–¥, –ø—Ä–∏–º–µ—Ä—ã
üìö *–ì–ª–∞–≥–æ–ª—ã* - —Ñ–æ—Ä–º—ã, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –ø—Ä–∏–º–µ—Ä—ã
üí¨ *–§—Ä–∞–∑—ã* - —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–º–∞–º
üìñ *–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞* - –ø—Ä–∞–≤–∏–ª–∞ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - –ø–æ–º–æ—â—å
/word <—Å–ª–æ–≤–æ> - –Ω–∞–π—Ç–∏ —Å–ª–æ–≤–æ
/verb <–≥–ª–∞–≥–æ–ª> - –Ω–∞–π—Ç–∏ –≥–ª–∞–≥–æ–ª  
/random - —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ

üí° *–î–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:*
‚Ä¢ –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ
‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ

*–£–¥–∞—á–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏!* üåü
    """
    
    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def verb_detail_handler(query, verb):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    await query.edit_message_text(
        text=f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≥–æ–ª–µ *{verb}*...",
        parse_mode='Markdown'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–ª–∞–≥–æ–ª–µ
    verb_info = await english_api.get_verb_info(verb)
    
    if verb_info:
        text = f"""
üî§ *–ì–ª–∞–≥–æ–ª: {verb_info['word']}*

üìù *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:* {verb_info.get('phonetic', '/—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è/')}
üá∑üá∫ *–ü–µ—Ä–µ–≤–æ–¥:* {verb_info['meanings'][0]['translation'] if verb_info['meanings'] else '–ø–µ—Ä–µ–≤–æ–¥'}

"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—ã –¥–ª—è –≥–ª–∞–≥–æ–ª–æ–≤
        if 'past' in verb_info and 'participle' in verb_info:
            text += f"üìä *–§–æ—Ä–º—ã:*\n"
            text += f"‚Ä¢ Past Simple: {verb_info['past']}\n"
            text += f"‚Ä¢ Past Participle: {verb_info['participle']}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã
        text += f"üí° *–ü—Ä–∏–º–µ—Ä—ã:*\n"
        text += f"‚Ä¢ I {verb} every day\n"
        text += f"‚Ä¢ She {verb}s to school\n"
        text += f"‚Ä¢ They {verb_info.get('past', verb+'ed')} yesterday\n\n"
        
        text += f"üìö *–ò—Å—Ç–æ—á–Ω–∏–∫:* {verb_info.get('source', '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö')}\n\n"
        text += "üéØ *–ü—Ä–∞–∫—Ç–∏–∫–∞:* –°–æ—Å—Ç–∞–≤—å—Ç–µ 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å —ç—Ç–∏–º –≥–ª–∞–≥–æ–ª–æ–º!"
    
    else:
        text = f"""
üî§ *–ì–ª–∞–≥–æ–ª: {verb}*

‚ö†Ô∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*

*–ë–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º—ã:*
‚Ä¢ Infinitive: {verb}
‚Ä¢ Past Simple: {verb}ed
‚Ä¢ Past Participle: {verb}ed

üí° *–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
I {verb} to learn English - –Ø {verb} —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–ª–∞–≥–æ–ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:* `/verb {verb}`
        """
    
    keyboard = [
        [InlineKeyboardButton("üîç –î—Ä—É–≥–æ–π –≥–ª–∞–≥–æ–ª", callback_data="popular_verbs")],
        [InlineKeyboardButton("üéØ –°–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ", callback_data="random_word")],
        [InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="back_to_main")],
    ]
    
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def phrases_handler(query, category):
    phrases_db = {
        "greetings": [
            {"english": "Hello! / Hi!", "russian": "–ü—Ä–∏–≤–µ—Ç!", "context": "–ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"},
            {"english": "Good morning!", "russian": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!", "context": "–î–æ 12:00"},
            {"english": "Good afternoon!", "russian": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!", "context": "12:00-18:00"},
            {"english": "Good evening!", "russian": "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!", "context": "–ü–æ—Å–ª–µ 18:00"},
            {"english": "How are you?", "russian": "–ö–∞–∫ –¥–µ–ª–∞?", "context": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å"},
            {"english": "I'm fine, thanks!", "russian": "–•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!", "context": "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç"},
        ],
        "introduction": [
            {"english": "What's your name?", "russian": "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", "context": "–°–ø—Ä–æ—Å–∏—Ç—å –∏–º—è"},
            {"english": "My name is...", "russian": "–ú–µ–Ω—è –∑–æ–≤—É—Ç...", "context": "–ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è"},
            {"english": "Where are you from?", "russian": "–û—Ç–∫—É–¥–∞ —Ç—ã?", "context": "–°–ø—Ä–æ—Å–∏—Ç—å –æ—Ç–∫—É–¥–∞"},
            {"english": "I'm from Russia", "russian": "–Ø –∏–∑ –†–æ—Å—Å–∏–∏", "context": "–û—Ç–≤–µ—Ç–∏—Ç—å –æ—Ç–∫—É–¥–∞"},
            {"english": "Nice to meet you!", "russian": "–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è!", "context": "–ü–æ—Å–ª–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"},
        ],
        "cafe": [
            {"english": "Can I have a coffee?", "russian": "–ú–æ–∂–Ω–æ –º–Ω–µ –∫–æ—Ñ–µ?", "context": "–ó–∞–∫–∞–∑ –Ω–∞–ø–∏—Ç–∫–∞"},
            {"english": "I would like tea", "russian": "–Ø –±—ã —Ö–æ—Ç–µ–ª(–∞) —á–∞–π", "context": "–í–µ–∂–ª–∏–≤—ã–π –∑–∞–∫–∞–∑"},
            {"english": "How much is it?", "russian": "–°–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç?", "context": "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É"},
            {"english": "The bill, please", "russian": "–°—á–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", "context": "–ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç"},
        ],
        "questions": [
            {"english": "What is this?", "russian": "–ß—Ç–æ —ç—Ç–æ?", "context": "–°–ø—Ä–æ—Å–∏—Ç—å –æ –ø—Ä–µ–¥–º–µ—Ç–µ"},
            {"english": "Where is...?", "russian": "–ì–¥–µ...?", "context": "–°–ø—Ä–æ—Å–∏—Ç—å –æ –º–µ—Å—Ç–µ"},
            {"english": "When...?", "russian": "–ö–æ–≥–¥–∞...?", "context": "–°–ø—Ä–æ—Å–∏—Ç—å –æ –≤—Ä–µ–º–µ–Ω–∏"},
            {"english": "Why...?", "russian": "–ü–æ—á–µ–º—É...?", "context": "–°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É"},
            {"english": "How...?", "russian": "–ö–∞–∫...?", "context": "–°–ø—Ä–æ—Å–∏—Ç—å —Å–ø–æ—Å–æ–±"},
        ]
    }
    
    category_names = {
        "greetings": "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è",
        "introduction": "ü§ù –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ", 
        "cafe": "‚òï –í –∫–∞—Ñ–µ",
        "questions": "‚ùì –í–æ–ø—Ä–æ—Å—ã"
    }
    
    phrases = phrases_db.get(category, [])
    category_name = category_names.get(category, category)
    
    text = f"üí¨ *{category_name}*\n\n"
    
    for phrase in phrases:
        text += f"‚Ä¢ *{phrase['english']}*\n"
        text += f"  üá∑üá∫ {phrase['russian']}\n"
        text += f"  _üí° {phrase['context']}_\n\n"
    
    text += "üí° *–°–æ–≤–µ—Ç:* –ü—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç–µ —Ñ—Ä–∞–∑—ã –≤—Å–ª—É—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è!"
    
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=get_phrases_keyboard()
    )

async def grammar_detail_handler(query, tense):
    grammar_db = {
        "present_simple": {
            "name": "Present Simple",
            "usage": "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –ø—Ä–∏–≤—ã—á–∫–∏, —Ñ–∞–∫—Ç—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            "structure": "Subject + V1/V1+s (he/she/it)",
            "examples": [
                "I work every day - –Ø —Ä–∞–±–æ—Ç–∞—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
                "He works in an office - –û–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ–∏—Å–µ",
                "We like music - –ù–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –º—É–∑—ã–∫–∞",
                "The sun rises in the east - –°–æ–ª–Ω—Ü–µ –≤—Å—Ç–∞–µ—Ç –Ω–∞ –≤–æ—Å—Ç–æ–∫–µ"
            ],
            "signal_words": ["always", "usually", "often", "every day", "sometimes", "never"]
        },
        "present_continuous": {
            "name": "Present Continuous", 
            "usage": "–î–µ–π—Å—Ç–≤–∏—è –≤ –º–æ–º–µ–Ω—Ç —Ä–µ—á–∏, –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏, –ø–ª–∞–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ",
            "structure": "Subject + am/is/are + V-ing",
            "examples": [
                "I am reading now - –Ø —Å–µ–π—á–∞—Å —á–∏—Ç–∞—é",
                "She is watching TV - –û–Ω–∞ —Å–º–æ—Ç—Ä–∏—Ç —Ç–µ–ª–µ–≤–∏–∑–æ—Ä", 
                "They are playing football - –û–Ω–∏ –∏–≥—Ä–∞—é—Ç –≤ —Ñ—É—Ç–±–æ–ª",
                "We are meeting tomorrow - –ú—ã –≤—Å—Ç—Ä–µ—á–∞–µ–º—Å—è –∑–∞–≤—Ç—Ä–∞"
            ],
            "signal_words": ["now", "at the moment", "currently", "today", "right now"]
        },
        "past_simple": {
            "name": "Past Simple",
            "usage": "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –ø—Ä–æ—à–ª–æ–º, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è", 
            "structure": "Subject + V2 (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ: V+ed)",
            "examples": [
                "I worked yesterday - –Ø —Ä–∞–±–æ—Ç–∞–ª –≤—á–µ—Ä–∞",
                "She went to school - –û–Ω–∞ —Ö–æ–¥–∏–ª–∞ –≤ —à–∫–æ–ª—É",
                "We saw a movie - –ú—ã —Å–º–æ—Ç—Ä–µ–ª–∏ —Ñ–∏–ª—å–º", 
                "He lived in London - –û–Ω –∂–∏–ª –≤ –õ–æ–Ω–¥–æ–Ω–µ"
            ],
            "signal_words": ["yesterday", "last week", "ago", "in 2020", "then"]
        },
        "future_simple": {
            "name": "Future Simple",
            "usage": "–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –æ–±–µ—â–∞–Ω–∏—è, –±—É–¥—É—â–∏–µ —Ñ–∞–∫—Ç—ã",
            "structure": "Subject + will + V1", 
            "examples": [
                "I will help you - –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ",
                "It will rain tomorrow - –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –¥–æ–∂–¥—å",
                "We will travel next year - –ú—ã –±—É–¥–µ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Å–ª–µ–¥—É—é—â–µ–º –≥–æ–¥—É",
                "She will be 25 next month - –ï–π –±—É–¥–µ—Ç 25 –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ"
            ],
            "signal_words": ["tomorrow", "next week", "soon", "in the future", "later"]
        }
    }
    
    tense_info = grammar_db.get(tence, {})
    
    if tense_info:
        text = f"""
üìñ *{tense_info['name']}*

üéØ *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:* {tense_info['usage']}

üèóÔ∏è *–§–æ—Ä–º—É–ª–∞:* `{tense_info['structure']}`

üìù *–ü—Ä–∏–º–µ—Ä—ã:*
"""
        for example in tense_info['examples']:
            text += f"‚Ä¢ {example}\n"
        
        text += f"\nüîç *–°–ª–æ–≤–∞-–º–∞—Ä–∫–µ—Ä—ã:* {', '.join(tense_info['signal_words'])}"
        
        text += f"""

üí° *–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:* –°–æ—Å—Ç–∞–≤—å—Ç–µ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ {tense_info['name']}!
        """
    else:
        text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
    
    await query.edit_message_text(
        text=text,
        parse_mode='Markdown',
        reply_markup=get_grammar_keyboard()
    )

# --- –ö–û–ú–ê–ù–î–´ –î–õ–Ø –í–í–û–î–ê –¢–ï–ö–°–¢–ê ---
async def word_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: `/word hello`",
            parse_mode='Markdown'
        )
        return
    
    word = context.args[0].lower()
    await search_and_send_word_info(update, word, "word")

async def verb_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –≥–ª–∞–≥–æ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: `/verb go`",
            parse_mode='Markdown'
        )
        return
    
    verb = context.args[0].lower()
    await search_and_send_word_info(update, verb, "verb")

async def random_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await random_word_handler(update)

async def search_and_send_word_info(update, word, word_type):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –∏—â–µ–º
    if update.message:
        message = await update.message.reply_text(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {'–≥–ª–∞–≥–æ–ª–µ' if word_type == 'verb' else '—Å–ª–æ–≤–µ'} *{word}*...", parse_mode='Markdown')
    else:
        message = await update.callback_query.message.reply_text(f"üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {'–≥–ª–∞–≥–æ–ª–µ' if word_type == 'verb' else '—Å–ª–æ–≤–µ'} *{word}*...", parse_mode='Markdown')
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    word_info = await english_api.get_verb_info(word)
    
    if word_info:
        text = f"""
üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞:*

üìñ *{'–ì–ª–∞–≥–æ–ª' if word_type == 'verb' else '–°–ª–æ–≤–æ'}:* {word_info['word']}
üìù *–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è:* {word_info.get('phonetic', '/—Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è/')}
üá∑üá∫ *–ü–µ—Ä–µ–≤–æ–¥:* {word_info['meanings'][0]['translation'] if word_info['meanings'] else '–ø–µ—Ä–µ–≤–æ–¥'}
"""
        
        if word_type == 'verb' and 'past' in word_info:
            text += f"üìä *–§–æ—Ä–º—ã –≥–ª–∞–≥–æ–ª–∞:*\n"
            text += f"‚Ä¢ Past Simple: {word_info['past']}\n"
            text += f"‚Ä¢ Past Participle: {word_info['participle']}\n\n"
        
        text += f"üí° *–ü—Ä–∏–º–µ—Ä:* I {word} every day.\n\n"
        text += f"üìö *–ò—Å—Ç–æ—á–Ω–∏–∫:* {word_info.get('source', '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö')}"
    
    else:
        text = f"""
üîç *{'–ì–ª–∞–≥–æ–ª' if word_type == 'verb' else '–°–ª–æ–≤–æ'}:* {word}

‚ö†Ô∏è *–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*

*–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö
‚Ä¢ –ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ
‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–∏–º–µ—Ä—ã

üí° *–ü—Ä–∏–º–µ—Ä:* I like to {word} - –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è {word}
        """
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    if update.message:
        await message.edit_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())
    else:
        await message.edit_text(text, parse_mode='Markdown', reply_markup=get_main_menu_keyboard())

# --- –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ---
def main():
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway.")
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("word", word_command))
    application.add_handler(CommandHandler("verb", verb_command))
    application.add_handler(CommandHandler("random", random_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback
    application.add_handler(CallbackQueryHandler(handle_callback))
    
    # –ó–∞–ø—É—Å–∫
    if os.getenv('RAILWAY_ENVIRONMENT'):
        # –ù–∞ Railway –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–±—Ö—É–∫
        PORT = int(os.getenv('PORT', 8443))
        WEBHOOK_URL = os.getenv('RAILWAY_STATIC_URL')
        
        if WEBHOOK_URL:
            application.run_webhook(
                listen="0.0.0.0",
                port=PORT,
                url_path=BOT_TOKEN,
                webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤–µ–±—Ö—É–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–ª–∏–Ω–≥
            logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–∞ Railway...")
            application.run_polling()
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–ª–∏–Ω–≥
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –ø–æ–ª–ª–∏–Ω–≥–∞ –ª–æ–∫–∞–ª—å–Ω–æ...")
        application.run_polling()

if __name__ == '__main__':
    main()
