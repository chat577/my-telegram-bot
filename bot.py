import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ë—É–¥–µ–º –±—Ä–∞—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Railway
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üöÄ –°—Ç–∞—Ä—Ç"), KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        [KeyboardButton("üìû –ü–æ–º–æ—â—å"), KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_main_keyboard()
    await update.message.reply_text(
        'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        'üìû –ü–æ–º–æ—â—å:\n'
        '‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–°—Ç–∞—Ä—Ç" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã\n'
        '‚Ä¢ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" - –æ –±–æ—Ç–µ\n'
        '‚Ä¢ "–ü–æ–º–æ—â—å" - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n'
        '‚Ä¢ "–ù–∞–∑–∞–¥" - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üöÄ –°—Ç–∞—Ä—Ç":
        await update.message.reply_text(
            'üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n'
            '–≠—Ç–æ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏.\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥:',
            reply_markup=get_main_keyboard()
        )
    
    elif text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await update.message.reply_text(
            'ü§ñ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**\n'
            '‚Ä¢ –°–æ–∑–¥–∞–Ω –Ω–∞ Python\n'
            '‚Ä¢ –•–æ—Å—Ç–∏—Ç—Å—è –Ω–∞ Railway\n'
            '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç python-telegram-bot\n'
            '‚Ä¢ –ò–º–µ–µ—Ç –∫–Ω–æ–ø–æ—á–Ω–æ–µ –º–µ–Ω—é\n\n'
            '–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏!',
            reply_markup=get_main_keyboard()
        )
    
    elif text == "üìû –ü–æ–º–æ—â—å":
        await help_command(update, context)
    
    elif text == "üîô –ù–∞–∑–∞–¥":
        await update.message.reply_text(
            'üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            reply_markup=get_main_keyboard()
        )
    
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
        await update.message.reply_text(
            '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:',
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–æ–∫)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if text in ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi']:
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:',
            reply_markup=get_main_keyboard()
        )
    elif text in ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é']:
        await update.message.reply_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä')
    else:
        await update.message.reply_text(
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è:',
            reply_markup=get_main_keyboard()
        )

def main():
    try:
        # –°–æ–∑–¥–∞–µ–º Application
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        application.add_handler(MessageHandler(filters.TEXT & filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
