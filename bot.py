import os
import logging
import requests
import random
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv('BOT_TOKEN')

# –°–ª–æ–≤–∞—Ä—å —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
THEMATIC_IMAGES = {
    "–∫–æ—Å–º–æ—Å": [
        "https://images.unsplash.com/photo-1446776653964-20c1d3a81b06",  # –∫–æ—Å–º–æ—Å
        "https://images.unsplash.com/photo-1462331940025-496dfbfc7564",  # –≥–∞–ª–∞–∫—Ç–∏–∫–∞
    ],
    "–∂–∏–≤–æ—Ç–Ω—ã–µ": [
        "https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba",  # –∫–æ—Ç
        "https://images.unsplash.com/photo-1543852786-1cf6624b9987",  # —Å–æ–±–∞–∫–∞
    ],
    "–ø—Ä–∏—Ä–æ–¥–∞": [
        "https://images.unsplash.com/photo-1501854140801-50d01698950b",  # –≥–æ—Ä—ã
        "https://images.unsplash.com/photo-1470071459604-3b5ec3a7fe05",  # –ª–µ—Å
    ],
    "–≥–æ—Ä–æ–¥": [
        "https://images.unsplash.com/photo-1449824913935-59a10b8d2000",  # –≥–æ—Ä–æ–¥
        "https://images.unsplash.com/photo-1480714378408-67cf0d13bc1b",  # –Ω–µ–±–æ—Å–∫—Ä–µ–±—ã
    ],
    "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": [
        "https://images.unsplash.com/photo-1485827404703-89b55fcc595e",  # —Ä–æ–±–æ—Ç
        "https://images.unsplash.com/photo-1535223289827-42f1e9919769",  # –±—É–¥—É—â–µ–µ
    ]
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="generate_image")],
        [InlineKeyboardButton("üéØ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="popular_requests")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_popular_requests_keyboard():
    keyboard = [
        [InlineKeyboardButton("üöÄ –ö–æ—Å–º–æ—Å –∏ –ø–ª–∞–Ω–µ—Ç—ã", callback_data="req_space")],
        [InlineKeyboardButton("üê± –ú–∏–ª—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ", callback_data="req_animals")],
        [InlineKeyboardButton("üèîÔ∏è –ü—Ä–∏—Ä–æ–¥–∞ –∏ –ø–µ–π–∑–∞–∂–∏", callback_data="req_nature")],
        [InlineKeyboardButton("üèôÔ∏è –ì–æ—Ä–æ–¥–∞ –±—É–¥—É—â–µ–≥–æ", callback_data="req_city")],
        [InlineKeyboardButton("ü§ñ –†–æ–±–æ—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", callback_data="req_tech")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_generate_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ö–æ–∂–µ–µ", callback_data="generate_similar")],
        [InlineKeyboardButton("üé® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", callback_data="generate_image")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_keyboard():
    return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_cmd")]])

def analyze_request(text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–º—É"""
    text_lower = text.lower()
    
    if any(word in text_lower for word in ['–∫–æ—Å–º–æ—Å', '–ø–ª–∞–Ω–µ—Ç', '–∑–≤–µ–∑–¥', '–≥–∞–ª–∞–∫—Ç–∏–∫']):
        return "–∫–æ—Å–º–æ—Å"
    elif any(word in text_lower for word in ['–∫–æ—Ç', '—Å–æ–±–∞–∫', '–∂–∏–≤–æ—Ç–Ω', '–ø–∞–Ω–¥–∞', '–º–µ–¥–≤–µ–¥']):
        return "–∂–∏–≤–æ—Ç–Ω—ã–µ"
    elif any(word in text_lower for word in ['–ø—Ä–∏—Ä–æ–¥', '–ª–µ—Å', '–≥–æ—Ä', '–æ–∑–µ—Ä', '–ø–µ–π–∑–∞–∂']):
        return "–ø—Ä–∏—Ä–æ–¥–∞"
    elif any(word in text_lower for word in ['–≥–æ—Ä–æ–¥', '–∑–¥–∞–Ω–∏', '–Ω–µ–±–æ—Å–∫—Ä–µ–±', '—É–ª–∏—Ü']):
        return "–≥–æ—Ä–æ–¥"
    elif any(word in text_lower for word in ['—Ä–æ–±–æ—Ç', '—Ç–µ—Ö–Ω–∏–∫', '–±—É–¥—É—â', '–∏—Å–∫—É—Å—Å']):
        return "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
    else:
        return "random"

def generate_smart_image(text):
    """–£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º–∞—Ç–∏–∫–∏"""
    try:
        theme = analyze_request(text)
        
        if theme in THEMATIC_IMAGES:
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            image_url = random.choice(THEMATIC_IMAGES[theme])
            return {
                "success": True,
                "image_url": image_url,
                "theme": theme,
                "description": f"üé® –¢–µ–º–∞: {theme}\nüìù –ó–∞–ø—Ä–æ—Å: '{text}'"
            }
        else:
            # –°–ª—É—á–∞–π–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            collections = {
                "–∫–æ—Å–º–æ—Å": 444,
                "–∂–∏–≤–æ—Ç–Ω—ã–µ": 105,
                "–ø—Ä–∏—Ä–æ–¥–∞": 106,
                "–≥–æ—Ä–æ–¥": 116,
                "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": 109
            }
            collection_id = random.choice(list(collections.values()))
            image_url = f"https://source.unsplash.com/collection/{collection_id}/512x512"
            
            return {
                "success": True,
                "image_url": image_url,
                "theme": "random",
                "description": f"üé® –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞\nüìù –ó–∞–ø—Ä–æ—Å: '{text}'"
            }
            
    except Exception as e:
        logging.error(f"Error in smart generation: {e}")
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"
        }

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_main_keyboard()
    
    welcome_text = (
        "üé® **–£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π**\n\n"
        "–Ø –ø–æ–¥–±–∏—Ä–∞—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é!\n\n"
        "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å\n"
        "‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—é —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ –ù–∞—Ö–æ–∂—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(welcome_text, reply_markup=keyboard, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n\n"
        "**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**\n"
        "‚Ä¢ '–ö–æ—Å–º–æ—Å –∏ –ø–ª–∞–Ω–µ—Ç—ã' üöÄ\n"
        "‚Ä¢ '–ú–∏–ª—ã–µ –∫–æ—Ç—ã –∏ —Å–æ–±–∞–∫–∏' üê±\n" 
        "‚Ä¢ '–ì–æ—Ä–Ω—ã–µ –ø–µ–π–∑–∞–∂–∏' üèîÔ∏è\n"
        "‚Ä¢ '–ì–æ—Ä–æ–¥–∞ –±—É–¥—É—â–µ–≥–æ' üèôÔ∏è\n"
        "‚Ä¢ '–†–æ–±–æ—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏' ü§ñ\n\n"
        "**–°–æ–≤–µ—Ç—ã:**\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ–º—ã\n"
        "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã'\n"
        "‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏!"
    )
    
    if update.message:
        await update.message.reply_text(help_text, reply_markup=get_back_keyboard(), parse_mode='Markdown')
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(help_text, reply_markup=get_back_keyboard(), parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "start_cmd":
        await start_command(update, context)
    
    elif data == "generate_image":
        instruction_text = (
            "üé® **–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:**\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
            "‚Ä¢ '–ö–æ—Å–º–æ—Å —Å –ø–ª–∞–Ω–µ—Ç–∞–º–∏'\n"
            "‚Ä¢ '–ú–∏–ª—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ'\n" 
            "‚Ä¢ '–ì–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂'\n"
            "‚Ä¢ '–ì–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ'\n"
            "‚Ä¢ '–†–æ–±–æ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:"
        )
        
        context.user_data[user_id] = {'waiting_for_text': True}
        await query.edit_message_text(instruction_text, reply_markup=get_back_keyboard(), parse_mode='Markdown')
    
    elif data == "popular_requests":
        await query.edit_message_text(
            "üéØ **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:",
            reply_markup=get_popular_requests_keyboard()
        )
    
    elif data.startswith("req_"):
        themes = {
            "req_space": "–∫–æ—Å–º–æ—Å –ø–ª–∞–Ω–µ—Ç—ã –∑–≤–µ–∑–¥—ã",
            "req_animals": "–º–∏–ª—ã–µ –∂–∏–≤–æ—Ç–Ω—ã–µ –∫–æ—Ç—ã —Å–æ–±–∞–∫–∏", 
            "req_nature": "–≥–æ—Ä–Ω—ã–π –ø–µ–π–∑–∞–∂ –ø—Ä–∏—Ä–æ–¥–∞",
            "req_city": "–≥–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
            "req_tech": "—Ä–æ–±–æ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–µ"
        }
        
        theme_text = themes[data]
        await process_image_generation(update, context, theme_text, user_id)
    
    elif data == "generate_similar":
        last_text = context.user_data.get(user_id, {}).get('last_text', '')
        if last_text:
            await process_image_generation(update, context, last_text, user_id)
        else:
            await query.answer("‚ùå –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
    
    elif data == "help_cmd":
        await help_command(update, context)
    
    elif data == "back_cmd":
        await start_command(update, context)

async def process_image_generation(update: Update, context: ContextTypes.DEFAULT_TYPE, user_text: str, user_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"üîç **–ò—â—É –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...**\n\n"
            f"–ó–∞–ø—Ä–æ—Å: '{user_text}'\n\n"
            f"‚è≥ –ü–æ–¥–±–∏—Ä–∞—é –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç...",
            parse_mode='Markdown'
        )
    
    result = generate_smart_image(user_text)
    
    if result["success"]:
        context.user_data[user_id] = {'last_text': user_text}
        
        success_text = (
            f"‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ!**\n\n"
            f"{result['description']}\n\n"
            f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ '–ø–æ—Ö–æ–∂–µ–µ' –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!"
        )
        
        try:
            if update.callback_query:
                await context.bot.send_photo(
                    chat_id=update.callback_query.message.chat_id,
                    photo=result["image_url"],
                    caption=success_text,
                    reply_markup=get_generate_keyboard(),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_photo(
                    photo=result["image_url"],
                    caption=success_text,
                    reply_markup=get_generate_keyboard(),
                    parse_mode='Markdown'
                )
        except Exception as e:
            await handle_photo_error(update, context, result, user_text)
    
    else:
        error_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: '{user_text}'"
        if update.callback_query:
            await update.callback_query.edit_message_text(error_text, reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text(error_text, reply_markup=get_main_keyboard())

async def handle_photo_error(update: Update, context: ContextTypes.DEFAULT_TYPE, result: dict, user_text: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ"""
    error_message = (
        f"‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!**\n\n"
        f"üìù –ó–∞–ø—Ä–æ—Å: '{user_text}'\n\n"
        f"üîó –°—Å—ã–ª–∫–∞: {result['image_url']}\n\n"
        f"üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!"
    )
    
    if update.callback_query:
        await update.callback_query.edit_message_text(error_message, reply_markup=get_generate_keyboard())
    else:
        await update.message.reply_text(error_message, reply_markup=get_generate_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    if context.user_data.get(user_id, {}).get('waiting_for_text'):
        context.user_data[user_id]['waiting_for_text'] = False
        await process_image_generation(update, context, text, user_id)
    else:
        await start_command(update, context)

def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
