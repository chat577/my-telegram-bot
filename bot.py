import os
import logging
import random
import requests
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ë–ê–ó–´ –î–ê–ù–ù–´–• –ù–ê –†–£–°–°–ö–û–ú
RUSSIAN_FACTS = [
    "üé≤ –ö–æ—Ç—ã –º–æ–≥—É—Ç –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å —É—à–∏ –Ω–∞ 180 –≥—Ä–∞–¥—É—Å–æ–≤!",
    "üé≤ –û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ –≥–æ–ª—É–±—É—é –∫—Ä–æ–≤—å!",
    "üé≤ –ú–µ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–æ—Ä—Ç–∏—Ç—Å—è - –∞—Ä—Ö–µ–æ–ª–æ–≥–∏ –Ω–∞—Ö–æ–¥–∏–ª–∏ —Å—ä–µ–¥–æ–±–Ω—ã–π –º–µ–¥ –≤–æ–∑—Ä–∞—Å—Ç–æ–º 3000 –ª–µ—Ç!",
    "üé≤ –ó–µ–º–ª—è - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–ª–∞–Ω–µ—Ç–∞, –Ω–µ –Ω–∞–∑–≤–∞–Ω–Ω–∞—è –≤ —á–µ—Å—Ç—å –±–æ–≥–∞!",
    "üé≤ –°–µ—Ä–¥—Ü–µ –∫–∏—Ç–∞ –±—å–µ—Ç—Å—è –≤—Å–µ–≥–æ 9 —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É!",
    "üé≤ –ó–º–µ–∏ –º–æ–≥—É—Ç —Å–ø–∞—Ç—å –¥–æ 3 –ª–µ—Ç –±–µ–∑ –µ–¥—ã!",
    "üé≤ –°—Ç—Ä–∞—É—Å—ã –º–æ–≥—É—Ç –±–µ–≥–∞—Ç—å –±—ã—Å—Ç—Ä–µ–µ –ª–æ—à–∞–¥–µ–π!",
    "üé≤ –ë–∞–±–æ—á–∫–∏ –ø—Ä–æ–±—É—é—Ç –µ–¥—É –ª–∞–ø–∫–∞–º–∏!"
]

RUSSIAN_JOKES = [
    "üòÇ –ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25!",
    "üòÇ –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –±–∞–±–æ—á–∫–∞-–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç? –ú–æ—Ç—ã–ª–µ–∫!",
    "üòÇ –ü–æ—á–µ–º—É Python –Ω–µ –Ω—É–∂–Ω–∞ –æ–¥–µ–∂–¥–∞? –ü–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∫–ª–∞—Å—Å—ã!",
    "üòÇ –ß—Ç–æ —Å–∫–∞–∑–∞–ª –æ–¥–∏–Ω —Å–µ—Ä–≤–µ—Ä –¥—Ä—É–≥–æ–º—É? –£ –º–µ–Ω—è RAM'–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç...",
    "üòÇ –ü–æ—á–µ–º—É –º–∞—Ç–µ–º–∞—Ç–∏–∫ –Ω–µ –ª—é–±–∏—Ç –ø—Ä–∏—Ä–æ–¥—É? –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö!",
    "üòÇ –ß—Ç–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç —Å–∫–∞–∑–∞–ª –ø–µ—Ä–µ–¥ —Å–º–µ—Ä—Ç—å—é? Hello world!",
    "üòÇ –ü–æ—á–µ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±–æ–ª–µ–µ—Ç? –£ –Ω–µ–≥–æ —Ö–æ—Ä–æ—à–∏–π –∏–º–º—É–Ω–∏—Ç–µ—Ç!"
]

RUSSIAN_ADVICES = [
    "üåü –ù–∞—á–Ω–∏ —Å–≤–æ–π –¥–µ–Ω—å —Å —É–ª—ã–±–∫–∏!",
    "üåü –ù–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–π –Ω–∞ –∑–∞–≤—Ç—Ä–∞ —Ç–æ, —á—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è.",
    "üåü –ü–æ–º–Ω–∏: –∫–∞–∂–¥—ã–π —ç–∫—Å–ø–µ—Ä—Ç –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª –Ω–æ–≤–∏—á–∫–æ–º.",
    "üåü –£—á–∏—Å—å –Ω–∞ –æ—à–∏–±–∫–∞—Ö - –æ–Ω–∏ –ª—É—á—à–∏–µ —É—á–∏—Ç–µ–ª—è!",
    "üåü –ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏ - —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å —Å–æ–±–æ–π –≤—á–µ—Ä–∞—à–Ω–∏–º.",
    "üåü –ú–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–≤–æ–¥—è—Ç –∫ –±–æ–ª—å—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º.",
    "üåü –û—Ç–¥—ã—Ö - —ç—Ç–æ —Ç–æ–∂–µ —á–∞—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
]

# –ë–ï–°–ü–õ–ê–¢–ù–´–ï API
API_URLS = {
    "quote": "https://api.quotable.io/random",
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_inline_keyboard():
    keyboard = [
        [InlineKeyboardButton("üöÄ –°—Ç–∞—Ä—Ç", callback_data="start_cmd")],
        [InlineKeyboardButton("üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", callback_data="generator_cmd")],
        [InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø", callback_data="horoscope_cmd")],
        [InlineKeyboardButton("üçΩÔ∏è –°–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç", callback_data="recipe_cmd")],
        [InlineKeyboardButton("üé¨ –¶–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∏–ª—å–º–æ–≤", callback_data="movie_cmd")],
        [InlineKeyboardButton("üî¢ –¢–µ—Å—Ç –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è", callback_data="birthdate_cmd")],
        [InlineKeyboardButton("üìû –ü–æ–º–æ—â—å", callback_data="help_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_generator_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç", callback_data="gen_fact")],
        [InlineKeyboardButton("üòÇ –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞", callback_data="gen_joke")],
        [InlineKeyboardButton("üí° –°–ª—É—á–∞–π–Ω–∞—è –∏–¥–µ—è", callback_data="gen_idea")],
        [InlineKeyboardButton("üåü –°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç", callback_data="gen_advice")],
        [InlineKeyboardButton("üìú –°–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞", callback_data="gen_quote")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_fact_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé≤ –ï—â–µ —Ñ–∞–∫—Ç", callback_data="gen_fact")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_joke_keyboard():
    keyboard = [
        [InlineKeyboardButton("üòÇ –ï—â–µ —à—É—Ç–∫—É", callback_data="gen_joke")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_idea_keyboard():
    keyboard = [
        [InlineKeyboardButton("üí° –ï—â–µ –∏–¥–µ—é", callback_data="gen_idea")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_advice_keyboard():
    keyboard = [
        [InlineKeyboardButton("üåü –ï—â–µ —Å–æ–≤–µ—Ç", callback_data="gen_advice")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_quote_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìú –ï—â–µ —Ü–∏—Ç–∞—Ç—É", callback_data="gen_quote")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_movie_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé¨ –ï—â–µ —Ü–∏—Ç–∞—Ç—É –∏–∑ —Ñ–∏–ª—å–º–∞", callback_data="movie_cmd")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_zodiac_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚ôà –û–≤–µ–Ω", callback_data="zodiac_aries")],
        [InlineKeyboardButton("‚ôâ –¢–µ–ª–µ—Ü", callback_data="zodiac_taurus")],
        [InlineKeyboardButton("‚ôä –ë–ª–∏–∑–Ω–µ—Ü—ã", callback_data="zodiac_gemini")],
        [InlineKeyboardButton("‚ôã –†–∞–∫", callback_data="zodiac_cancer")],
        [InlineKeyboardButton("‚ôå –õ–µ–≤", callback_data="zodiac_leo")],
        [InlineKeyboardButton("‚ôç –î–µ–≤–∞", callback_data="zodiac_virgo")],
        [InlineKeyboardButton("‚ôé –í–µ—Å—ã", callback_data="zodiac_libra")],
        [InlineKeyboardButton("‚ôè –°–∫–æ—Ä–ø–∏–æ–Ω", callback_data="zodiac_scorpio")],
        [InlineKeyboardButton("‚ôê –°—Ç—Ä–µ–ª–µ—Ü", callback_data="zodiac_sagittarius")],
        [InlineKeyboardButton("‚ôë –ö–æ–∑–µ—Ä–æ–≥", callback_data="zodiac_capricorn")],
        [InlineKeyboardButton("‚ôí –í–æ–¥–æ–ª–µ–π", callback_data="zodiac_aquarius")],
        [InlineKeyboardButton("‚ôì –†—ã–±—ã", callback_data="zodiac_pisces")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def get_daily_fact():
    return random.choice(RUSSIAN_FACTS)

def get_daily_joke():
    return random.choice(RUSSIAN_JOKES)

def get_daily_advice():
    return random.choice(RUSSIAN_ADVICES)

def get_daily_quote():
    try:
        response = requests.get(API_URLS["quote"])
        if response.status_code == 200:
            data = response.json()
            author_translations = {
                "Albert Einstein": "–ê–ª—å–±–µ—Ä—Ç –≠–π–Ω—à—Ç–µ–π–Ω",
                "Mahatma Gandhi": "–ú–∞—Ö–∞—Ç–º–∞ –ì–∞–Ω–¥–∏", 
                "Confucius": "–ö–æ–Ω—Ñ—É—Ü–∏–π",
                "Aristotle": "–ê—Ä–∏—Å—Ç–æ—Ç–µ–ª—å",
                "Plato": "–ü–ª–∞—Ç–æ–Ω",
                "Socrates": "–°–æ–∫—Ä–∞—Ç",
                "Bruce Lee": "–ë—Ä—é—Å –õ–∏",
                "Steve Jobs": "–°—Ç–∏–≤ –î–∂–æ–±—Å",
                "Bill Gates": "–ë–∏–ª–ª –ì–µ–π—Ç—Å",
                "Walt Disney": "–£–æ–ª—Ç –î–∏—Å–Ω–µ–π"
            }
            author = author_translations.get(data['author'], data['author'])
            return f"üìú –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è:\n\"{data['content']}\"\n‚Äî {author}"
    except:
        pass
    
    quotes = [
        "üìú –£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞. ‚Äî –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å",
        "üìú –õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± –Ω–∞—á–∞—Ç—å –¥–µ–ª–∞—Ç—å ‚Äî –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –≥–æ–≤–æ—Ä–∏—Ç—å –∏ –Ω–∞—á–∞—Ç—å –¥–µ–ª–∞—Ç—å. ‚Äî –£–æ–ª—Ç –î–∏—Å–Ω–µ–π",
        "üìú –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ ‚Äî –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å. ‚Äî –°—Ç–∏–≤ –î–∂–æ–±—Å",
        "üìú –ù–µ –æ—à–∏–±–∞–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç. –ù–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–∞—Ç—å—Å—è. ‚Äî –¢–µ–æ–¥–æ—Ä –†—É–∑–≤–µ–ª—å—Ç",
        "üìú –ë—É–¥—É—â–µ–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–º, –∫—Ç–æ –≤–µ—Ä–∏—Ç –≤ –∫—Ä–∞—Å–æ—Ç—É —Å–≤–æ–µ–π –º–µ—á—Ç—ã. ‚Äî –≠–ª–µ–æ–Ω–æ—Ä–∞ –†—É–∑–≤–µ–ª—å—Ç"
    ]
    return random.choice(quotes)

def get_daily_idea():
    ideas = [
        "üí° –°–µ–≥–æ–¥–Ω—è –æ—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!",
        "üöÄ –ü–æ–ø—Ä–æ–±—É–π —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π Telegram –±–æ—Ç - —ç—Ç–æ –ø—Ä–æ—â–µ —á–µ–º –∫–∞–∂–µ—Ç—Å—è!",
        "üé® –ù–∞—Ä–∏—Å—É–π —á—Ç–æ-—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ - –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –Ω–µ —Ö—É–¥–æ–∂–Ω–∏–∫, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–∑–Ω–æ!",
        "üìö –ü—Ä–æ—á–∏—Ç–∞–π –≥–ª–∞–≤—É –∏–∑ –∫–Ω–∏–≥–∏ –∫–æ—Ç–æ—Ä—É—é –¥–∞–≤–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª",
        "üèÉ –°–¥–µ–ª–∞–π –Ω–µ–±–æ–ª—å—à—É—é –∑–∞—Ä—è–¥–∫—É - —Ç–µ–ª–æ —Å–∫–∞–∂–µ—Ç —Å–ø–∞—Å–∏–±–æ!",
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏ 5 –∏–¥–µ–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ - –æ–¥–Ω–∞ –∏–∑ –Ω–∏—Ö –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å—ë!",
        "üåç –ò–∑—É—á–∏ —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –æ –¥—Ä—É–≥–æ–π –∫—É–ª—å—Ç—É—Ä–µ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–µ",
        "üéµ –°–æ–∑–¥–∞–π –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã"
    ]
    return random.choice(ideas)

def get_daily_horoscope(sign):
    today = datetime.now().strftime("%d%m")
    seed = hash(sign + today) % 100
    
    zodiac_names = {
        "aries": "–û–≤–Ω–∞", "taurus": "–¢–µ–ª—å—Ü–∞", "gemini": "–ë–ª–∏–∑–Ω–µ—Ü–æ–≤",
        "cancer": "–†–∞–∫–∞", "leo": "–õ—å–≤–∞", "virgo": "–î–µ–≤—É",
        "libra": "–í–µ—Å–æ–≤", "scorpio": "–°–∫–æ—Ä–ø–∏–æ–Ω–∞", "sagittarius": "–°—Ç—Ä–µ–ª—å—Ü–∞",
        "capricorn": "–ö–æ–∑–µ—Ä–æ–≥–∞", "aquarius": "–í–æ–¥–æ–ª–µ—è", "pisces": "–†—ã–±"
    }
    
    horoscope_templates = [
        f"‚ôâ –î–ª—è {zodiac_names[sign]} —Å–µ–≥–æ–¥–Ω—è –∑–≤–µ–∑–¥—ã –±–ª–∞–≥–æ–≤–æ–ª—è—Ç –≤–∞–º! –ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π –∏ —Å–º–µ–ª—ã—Ö —Ä–µ—à–µ–Ω–∏–π.",
        f"‚ôâ {zodiac_names[sign].capitalize()} —Å–µ–≥–æ–¥–Ω—è: –æ—Å—Ç–µ—Ä–µ–≥–∞–π—Ç–µ—Å—å –Ω–µ–æ–±–¥—É–º–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –õ—É—á—à–µ –æ—Ç–ª–æ–∂–∏—Ç—å –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞.",
        f"‚ôâ –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {zodiac_names[sign]}: –¥–µ–Ω—å –≥–∞—Ä–º–æ–Ω–∏–∏ –∏ –±–∞–ª–∞–Ω—Å–∞. –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å –±–ª–∏–∑–∫–∏–º–∏ - —ç—Ç–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç –¥—É—à–µ–≤–Ω—ã–π –ø–æ–∫–æ–π.",
        f"‚ôâ {zodiac_names[sign].capitalize()} —Å–µ–≥–æ–¥–Ω—è: —ç–Ω–µ—Ä–≥–∏—è –±—å–µ—Ç –∫–ª—é—á–æ–º! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ –ø—Ä–æ–µ–∫—Ç–æ–≤.",
        f"‚ôâ –î–ª—è {zodiac_names[sign]} —Å–µ–≥–æ–¥–Ω—è: –≤—Ä–µ–º—è –¥–ª—è —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑–∞. –ó–∞–π–º–∏—Ç–µ—Å—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–ª–∏.",
        f"‚ôâ {zodiac_names[sign].capitalize()} —Å–µ–≥–æ–¥–Ω—è: —É–¥–∞—á–∞ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ! –°–º–µ–ª–æ –±–µ—Ä–∏—Ç–µ—Å—å –∑–∞ —Ç–æ, —á—Ç–æ –¥–∞–≤–Ω–æ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–ª–∏."
    ]
    
    return horoscope_templates[seed % len(horoscope_templates)]

def get_daily_recipe():
    recipes = [
        "üç≥ **–ü—Ä–æ—Å—Ç–∞—è —è–∏—á–Ω–∏—Ü–∞ —Å –ø–æ–º–∏–¥–æ—Ä–∞–º–∏:**\n2 —è–π—Ü–∞, 1 –ø–æ–º–∏–¥–æ—Ä, —Å–æ–ª—å, –ø–µ—Ä–µ—Ü. –ü–æ–º–∏–¥–æ—Ä –Ω–∞—Ä–µ–∑–∞—Ç—å, –æ–±–∂–∞—Ä–∏—Ç—å 2 –º–∏–Ω, –¥–æ–±–∞–≤–∏—Ç—å —è–π—Ü–∞, –∂–∞—Ä–∏—Ç—å –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏. –í–∫—É—Å–Ω–æ –∏ –ø–æ–ª–µ–∑–Ω–æ!",
        "ü•ó **–°–≤–µ–∂–∏–π —Å–∞–ª–∞—Ç:**\n–û–≥—É—Ä–µ—Ü, –ø–æ–º–∏–¥–æ—Ä, –±–æ–ª–≥–∞—Ä—Å–∫–∏–π –ø–µ—Ä–µ—Ü, –ª—É–∫. –ù–∞—Ä–µ–∑–∞—Ç—å –∫—É–±–∏–∫–∞–º–∏, –∑–∞–ø—Ä–∞–≤–∏—Ç—å –æ–ª–∏–≤–∫–æ–≤—ã–º –º–∞—Å–ª–æ–º –∏ –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º.",
        "üçù **–ü–∞—Å—Ç–∞ —Å —á–µ—Å–Ω–æ–∫–æ–º:**\n–°–ø–∞–≥–µ—Ç—Ç–∏, 3 –∑—É–±—á–∏–∫–∞ —á–µ—Å–Ω–æ–∫–∞, –æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ, –ø–µ—Ç—Ä—É—à–∫–∞. –ü–∞—Å—Ç—É –æ—Ç–≤–∞—Ä–∏—Ç—å, —á–µ—Å–Ω–æ–∫ –æ–±–∂–∞—Ä–∏—Ç—å, —Å–º–µ—à–∞—Ç—å —Å –ø–∞—Å—Ç–æ–π.",
        "üçå **–§—Ä—É–∫—Ç–æ–≤—ã–π —Å–º—É–∑–∏:**\n–ë–∞–Ω–∞–Ω, —è–±–ª–æ–∫–æ, –π–æ–≥—É—Ä—Ç, –º–µ–¥. –í–∑–±–∏—Ç—å –≤ –±–ª–µ–Ω–¥–µ—Ä–µ - –≥–æ—Ç–æ–≤–æ –∑–∞ 2 –º–∏–Ω—É—Ç—ã!"
    ]
    return random.choice(recipes)

def get_movie_quote():
    quotes = [
        "üé¨ **–í–ª–∞—Å—Ç–µ–ª–∏–Ω –ö–æ–ª–µ—Ü:** '–î–∞–∂–µ —Å–∞–º—ã–π –º–∞–ª—ã–π —á–µ–ª–æ–≤–µ–∫ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å —Ö–æ–¥ –±—É–¥—É—â–µ–≥–æ.'",
        "üé¨ **–§–æ—Ä—Ä–µ—Å—Ç –ì–∞–º–ø:** '–ñ–∏–∑–Ω—å –∫–∞–∫ –∫–æ—Ä–æ–±–∫–∞ —à–æ–∫–æ–ª–∞–¥–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ç: –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫–∞—è –Ω–∞—á–∏–Ω–∫–∞ —Ç–µ–±–µ –ø–æ–ø–∞–¥—ë—Ç—Å—è.'",
        "üé¨ **–ó–≤–µ–∑–¥–Ω—ã–µ –í–æ–π–Ω—ã:** '–î–∞ –ø—Ä–µ–±—É–¥–µ—Ç —Å —Ç–æ–±–æ–π –°–∏–ª–∞.'",
        "üé¨ **–ö—Ä–µ—Å—Ç–Ω—ã–π –æ—Ç–µ—Ü:** '–Ø —Å–¥–µ–ª–∞—é –µ–º—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è.'",
        "üé¨ **–¢–∏—Ç–∞–Ω–∏–∫:** '–Ø –∫–æ—Ä–æ–ª—å –º–∏—Ä–∞!'",
        "üé¨ **–ú–∞—Ç—Ä–∏—Ü–∞:** '–ó–Ω–∞–µ—à—å, –≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∑–Ω–∞–Ω–∏–µ–º –∏ –≤–µ—Ä–æ–π? –ù–µ –∑–Ω–∞–µ—à—å? –ê —è –∑–Ω–∞—é.'"
    ]
    return random.choice(quotes)

def calculate_birth_number(day, month, year):
    total = sum(int(d) for d in str(day)) + sum(int(d) for d in str(month)) + sum(int(d) for d in str(year))
    
    while total > 9:
        total = sum(int(d) for d in str(total))
    
    meanings = {
        1: "**–õ–∏–¥–µ—Ä** - –∞–º–±–∏—Ü–∏–æ–∑–Ω—ã–π, –Ω–æ–≤–∞—Ç–æ—Ä, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π",
        2: "**–î–∏–ø–ª–æ–º–∞—Ç** - —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π, –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π, –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π", 
        3: "**–¢–≤–æ—Ä–µ—Ü** - –æ–ø—Ç–∏–º–∏—Å—Ç, –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π, —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π",
        4: "**–ü—Ä–∞–∫—Ç–∏–∫** - –Ω–∞–¥–µ–∂–Ω—ã–π, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π, —Ç—Ä—É–¥–æ–ª—é–±–∏–≤—ã–π",
        5: "**–ê–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç** - —Å–≤–æ–±–æ–¥–æ–ª—é–±–∏–≤—ã–π, –ª—é–±–æ–ø—ã—Ç–Ω—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π",
        6: "**–ó–∞–±–æ—Ç–ª–∏–≤—ã–π** - –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, —Å–µ–º–µ–π–Ω—ã–π, –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π",
        7: "**–ê–Ω–∞–ª–∏—Ç–∏–∫** - –º—É–¥—Ä—ã–π, –¥—É—Ö–æ–≤–Ω—ã–π, –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π",
        8: "**–ë–∏–∑–Ω–µ—Å–º–µ–Ω** - –≤–ª–∞—Å—Ç–Ω—ã–π, —É—Å–ø–µ—à–Ω—ã–π, –º–∞—Ç–µ—Ä–∏–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
        9: "**–ì—É–º–∞–Ω–∏—Å—Ç** - —Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π, –∏–¥–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π, –º—É–¥—Ä—ã–π"
    }
    
    return total, meanings.get(total, "**–û—Å–æ–±–µ–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å** - —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ –º–Ω–æ–≥–æ–≥—Ä–∞–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä")

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_main_inline_keyboard()
    await update.message.reply_text(
        'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é —Å–≤–µ–∂–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!\n\n'
        '‚Ä¢ üé≤ –§–∞–∫—Ç—ã, —à—É—Ç–∫–∏, —Ü–∏—Ç–∞—Ç—ã\n'
        '‚Ä¢ üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –≥–æ—Ä–æ—Å–∫–æ–ø—ã\n'
        '‚Ä¢ üçΩÔ∏è –°–ª—É—á–∞–π–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã\n'
        '‚Ä¢ üé¨ –¶–∏—Ç–∞—Ç—ã –∏–∑ —Ñ–∏–ª—å–º–æ–≤\n'
        '‚Ä¢ üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
        reply_markup=keyboard
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_back_keyboard()
    
    if update.message:
        await update.message.reply_text(
            'üìû **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n\n'
            'üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä - —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–∫—Ç—ã, —à—É—Ç–∫–∏, —Ü–∏—Ç–∞—Ç—ã\n'
            'üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–∞\n'
            'üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã - –ø—Ä–æ—Å—Ç—ã–µ –∏–¥–µ–∏ –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏\n'
            'üé¨ –§–∏–ª—å–º—ã - –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ –∫–∏–Ω–æ\n'
            'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è - –∞–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n'
            'üí´ –ö–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!',
            reply_markup=keyboard
        )
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            'üìû **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**\n\n'
            'üé≤ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä - —Å–ª—É—á–∞–π–Ω—ã–µ —Ñ–∞–∫—Ç—ã, —à—É—Ç–∫–∏, —Ü–∏—Ç–∞—Ç—ã\n'
            'üìÖ –ì–æ—Ä–æ—Å–∫–æ–ø - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–Ω–∞–∫–∞\n'
            'üçΩÔ∏è –†–µ—Ü–µ–ø—Ç—ã - –ø—Ä–æ—Å—Ç—ã–µ –∏–¥–µ–∏ –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏\n'
            'üé¨ –§–∏–ª—å–º—ã - –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–µ —Ü–∏—Ç–∞—Ç—ã –∏–∑ –∫–∏–Ω–æ\n'
            'üî¢ –ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è - –∞–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è\n\n'
            'üí´ –ö–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ!',
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "start_cmd":
        keyboard = get_main_inline_keyboard()
        await query.edit_message_text(
            'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?',
            reply_markup=keyboard
        )
    
    elif data == "generator_cmd":
        keyboard = get_generator_keyboard()
        await query.edit_message_text(
            'üé≤ **–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å:',
            reply_markup=keyboard
        )
    
    elif data == "horoscope_cmd":
        keyboard = get_zodiac_keyboard()
        await query.edit_message_text(
            '‚ôà **–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø:**\n\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:',
            reply_markup=keyboard
        )
    
    elif data == "recipe_cmd":
        recipe = get_daily_recipe()
        keyboard = get_back_keyboard()
        await query.edit_message_text(
            f'üçΩÔ∏è {recipe}\n\n'
            '–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üéâ',
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    elif data == "movie_cmd":
        quote = get_movie_quote()
        keyboard = get_movie_keyboard()
        await query.edit_message_text(
            f'üé¨ {quote}\n\n'
            '–•–æ—Ç–∏—Ç–µ –µ—â–µ —Ü–∏—Ç–∞—Ç—É –∏–∑ —Ñ–∏–ª—å–º–∞?',
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    elif data == "birthdate_cmd":
        keyboard = get_back_keyboard()
        await query.edit_message_text(
            'üî¢ **–ù—É–º–µ—Ä–æ–ª–æ–≥–∏—è –ø–æ –¥–∞—Ç–µ —Ä–æ–∂–¥–µ–Ω–∏—è:**\n\n'
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
            '`–î–î.–ú–ú.–ì–ì–ì–ì`\n\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990\n'
            '–Ø —Ä–∞—Å—Å—á–∏—Ç–∞—é –≤–∞—à–µ —á–∏—Å–ª–æ —Å—É–¥—å–±—ã! ‚ú®',
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    elif data == "help_cmd":
        await help_command(update, context)
        return
    
    elif data.startswith("zodiac_"):
        sign = data.replace("zodiac_", "")
        horoscope = get_daily_horoscope(sign)
        keyboard = get_back_keyboard()
        await query.edit_message_text(
            horoscope,
            reply_markup=keyboard
        )
    
    elif data == "gen_fact":
        fact = get_daily_fact()
        keyboard = get_fact_keyboard()
        await query.edit_message_text(
            f'{fact}\n\n'
            '–•–æ—Ç–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω —Ñ–∞–∫—Ç?',
            reply_markup=keyboard
        )
    
    elif data == "gen_joke":
        joke = get_daily_joke()
        keyboard = get_joke_keyboard()
        await query.edit_message_text(
            f'{joke}\n\n'
            '–•–æ—Ç–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É —à—É—Ç–∫—É?',
            reply_markup=keyboard
        )
    
    elif data == "gen_idea":
        idea = get_daily_idea()
        keyboard = get_idea_keyboard()
        await query.edit_message_text(
            f'{idea}\n\n'
            '–•–æ—Ç–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É –∏–¥–µ—é?',
            reply_markup=keyboard
        )
    
    elif data == "gen_advice":
        advice = get_daily_advice()
        keyboard = get_advice_keyboard()
        await query.edit_message_text(
            f'{advice}\n\n'
            '–•–æ—Ç–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω —Å–æ–≤–µ—Ç?',
            reply_markup=keyboard
        )
    
    elif data == "gen_quote":
        quote = get_daily_quote()
        keyboard = get_quote_keyboard()
        await query.edit_message_text(
            f'{quote}\n\n'
            '–•–æ—Ç–∏—Ç–µ –µ—â–µ –æ–¥–Ω—É —Ü–∏—Ç–∞—Ç—É?',
            reply_markup=keyboard
        )
    
    elif data == "back_cmd":
        keyboard = get_main_inline_keyboard()
        await query.edit_message_text(
            'üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
async def handle_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    try:
        if '.' in text:
            day, month, year = map(int, text.split('.'))
        elif '-' in text:
            day, month, year = map(int, text.split('-'))
        elif '/' in text:
            day, month, year = map(int, text.split('/'))
        else:
            raise ValueError
        
        if 1 <= day <= 31 and 1 <= month <= 12 and 1900 <= year <= 2023:
            number, meaning = calculate_birth_number(day, month, year)
            keyboard = get_back_keyboard()
            await update.message.reply_text(
                f'üî¢ **–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏–∏:**\n\n'
                f'üìÖ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {text}\n'
                f'‚ú® –ß–∏—Å–ª–æ —Å—É–¥—å–±—ã: **{number}**\n\n'
                f'üìñ **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:** {meaning}\n\n'
                f'üí´ –≠—Ç–æ —á–∏—Å–ª–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç –≤–∞—à–∏ –≤—Ä–æ–∂–¥–µ–Ω–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª!',
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì\n'
                '–ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990'
            )
    except:
        await update.message.reply_text(
            '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990'
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if any(c.isdigit() for c in text) and ('.' in text or '-' in text or '/' in text):
        await handle_birthdate(update, context)
        return
    
    if any(word in text for word in ['—Ñ–∞–∫—Ç', 'fact']):
        await update.message.reply_text(get_daily_fact())
    elif any(word in text for word in ['—à—É—Ç–∫–∞', '–∞–Ω–µ–∫–¥–æ—Ç', 'joke']):
        await update.message.reply_text(get_daily_joke())
    elif any(word in text for word in ['—Ü–∏—Ç–∞—Ç–∞', 'quote']):
        await update.message.reply_text(get_daily_quote())
    elif any(word in text for word in ['—Å–æ–≤–µ—Ç', 'advice']):
        await update.message.reply_text(get_daily_advice())
    elif any(word in text for word in ['–∏–¥–µ—è', 'idea']):
        await update.message.reply_text(get_daily_idea())
    elif any(word in text for word in ['–≥–æ—Ä–æ—Å–∫–æ–ø', 'horoscope']):
        keyboard = get_zodiac_keyboard()
        await update.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞:', reply_markup=keyboard)
    elif any(word in text for word in ['—Ä–µ—Ü–µ–ø—Ç', 'recipe']):
        await update.message.reply_text(get_daily_recipe(), parse_mode='Markdown')
    elif any(word in text for word in ['—Ñ–∏–ª—å–º', 'movie']):
        await update.message.reply_text(get_movie_quote(), parse_mode='Markdown')
    elif any(word in text for word in ['—á–∏—Å–ª–æ', '–Ω—É–º–µ—Ä–æ–ª–æ–≥']):
        await update.message.reply_text(
            'üî¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.05.1990'
        )
    else:
        keyboard = get_main_inline_keyboard()
        await update.message.reply_text(
            '–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å üòä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ:\n'
            '‚Ä¢ "—Ñ–∞–∫—Ç" - —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n'
            '‚Ä¢ "—à—É—Ç–∫–∞" - —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞\n'
            '‚Ä¢ "–≥–æ—Ä–æ—Å–∫–æ–ø" - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø\n'
            '‚Ä¢ "—Ä–µ—Ü–µ–ø—Ç" - –∏–¥–µ—è –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏\n'
            '‚Ä¢ "15.05.1990" - –Ω—É–º–µ—Ä–æ–ª–æ–≥–∏—è –ø–æ –¥–∞—Ç–µ',
            reply_markup=keyboard
        )

def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
