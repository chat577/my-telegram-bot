import os
import logging
import requests
import random
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="generate_image")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_generate_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="generate_another")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_requests = {}

def generate_image_from_text(text):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
    –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –¥–µ–º–æ
    """
    try:
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: Unsplash Source (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        unsplash_url = f"https://source.unsplash.com/512x512/?{requests.utils.quote(text)}"
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: Lorem Picsum (–ø—Ä–æ—Å—Ç–æ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        random_id = random.randint(1, 1000)
        picsum_url = f"https://picsum.photos/512/512?random={random_id}"
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Placeholder —Å —Ü–≤–µ—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
        text_hash = abs(hash(text)) % 16777215  # RGB —Ü–≤–µ—Ç
        placeholder_url = f"https://via.placeholder.com/512/{(text_hash >> 16) & 255:02x}{(text_hash >> 8) & 255:02x}{text_hash & 255:02x}/ffffff?text={requests.utils.quote(text[:30])}"
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        strategies = [unsplash_url, picsum_url, placeholder_url]
        image_url = random.choice(strategies)
        
        return {
            "success": True,
            "image_url": image_url,
            "description": f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{text}'"
        }
    except Exception as e:
        logging.error(f"Error generating image: {e}")
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        }

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_main_keyboard()
    
    welcome_text = (
        "üé® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!**\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n\n"
        "**–ß—Ç–æ —è —É–º–µ—é:**\n"
        "‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É\n"
        "‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã\n"
        "‚Ä¢ üñºÔ∏è –°–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(welcome_text, reply_markup=keyboard, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**\n\n"
        "**–ö–∞–∫ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
        "‚Ä¢ '–∫–æ—Ç –∫–æ—Å–º–æ—Å'\n"
        "‚Ä¢ '–∑–∞–∫–∞—Ç –≥–æ—Ä—ã'\n"
        "‚Ä¢ '–≥–æ—Ä–æ–¥ –±—É–¥—É—â–µ–µ'\n"
        "‚Ä¢ '–ø–∞–Ω–¥–∞ –±–∞–º–±—É–∫'\n\n"
        "**–°–æ–≤–µ—Ç—ã:**\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n"
        "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö\n"
        "‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏!"
    )
    
    keyboard = get_back_keyboard()
    
    if update.message:
        await update.message.reply_text(help_text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(help_text, reply_markup=keyboard, parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "start_cmd":
        await start_command(update, context)
    
    elif data == "generate_image":
        instruction_text = (
            "üé® **–ö–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?**\n\n"
            "–û–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞–º–∏ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ 'cat space' (–∫–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ)\n"
            "‚Ä¢ 'sunset mountains' (–∑–∞–∫–∞—Ç –≤ –≥–æ—Ä–∞—Ö)\n"
            "‚Ä¢ 'robot future' (—Ä–æ–±–æ—Ç –±—É–¥—É—â–µ–µ)\n\n"
            "üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç:"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data[user_id] = {'waiting_for_text': True}
        
        await query.edit_message_text(instruction_text, reply_markup=get_back_keyboard(), parse_mode='Markdown')
    
    elif data == "generate_another":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –µ—â–µ –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ —Ç–µ–∫—Å—Ç–æ–º
        user_text = context.user_data.get(user_id, {}).get('last_text', '')
        
        if user_text:
            await process_image_generation(update, context, user_text, user_id)
        else:
            await query.edit_message_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=get_main_keyboard()
            )
    
    elif data == "help_cmd":
        await help_command(update, context)
    
    elif data == "back_cmd":
        await start_command(update, context)

async def process_image_generation(update: Update, context: ContextTypes.DEFAULT_TYPE, user_text: str, user_id: int):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if update.callback_query:
        await update.callback_query.edit_message_text(
            f"‚ö° **–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...**\n\n"
            f"–ó–∞–ø—Ä–æ—Å: '{user_text}'\n\n"
            f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚è≥",
            parse_mode='Markdown'
        )
    elif update.message:
        await update.message.reply_text(
            f"‚ö° **–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...**\n\n"
            f"–ó–∞–ø—Ä–æ—Å: '{user_text}'\n\n"
            f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚è≥",
            parse_mode='Markdown'
        )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    result = generate_image_from_text(user_text)
    
    if result["success"]:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in user_requests:
            user_requests[user_id] = []
        
        user_requests[user_id].append({
            "text": user_text,
            "timestamp": datetime.now().isoformat(),
            "image_url": result["image_url"]
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if user_id not in context.user_data:
            context.user_data[user_id] = {}
        context.user_data[user_id]['last_text'] = user_text
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        success_text = (
            f"‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!**\n\n"
            f"üìù –ó–∞–ø—Ä–æ—Å: '{user_text}'\n\n"
            f"–ß—Ç–æ –¥–∞–ª—å—à–µ?"
        )
        
        try:
            if update.callback_query:
                await context.bot.send_photo(
                    chat_id=update.callback_query.message.chat_id,
                    photo=result["image_url"],
                    caption=success_text,
                    reply_markup=get_generate_keyboard(),
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_photo(
                    photo=result["image_url"],
                    caption=success_text,
                    reply_markup=get_generate_keyboard(),
                    parse_mode='Markdown'
                )
        except Exception as e:
            logging.error(f"Error sending photo: {e}")
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
            error_message = (
                f"‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!**\n\n"
                f"üìù –ó–∞–ø—Ä–æ—Å: '{user_text}'\n\n"
                f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result['image_url']}\n\n"
                f"–ß—Ç–æ –¥–∞–ª—å—à–µ?"
            )
            if update.callback_query:
                await update.callback_query.edit_message_text(error_message, reply_markup=get_generate_keyboard(), parse_mode='Markdown')
            else:
                await update.message.reply_text(error_message, reply_markup=get_generate_keyboard(), parse_mode='Markdown')
    
    else:
        error_text = (
            f"‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{user_text}'\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
        )
        if update.callback_query:
            await update.callback_query.edit_message_text(error_text, reply_markup=get_generate_keyboard(), parse_mode='Markdown')
        else:
            await update.message.reply_text(error_text, reply_markup=get_generate_keyboard(), parse_mode='Markdown')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if context.user_data.get(user_id, {}).get('waiting_for_text'):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        context.user_data[user_id]['waiting_for_text'] = False
        await process_image_generation(update, context, text, user_id)
    
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await start_command(update, context)

def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
