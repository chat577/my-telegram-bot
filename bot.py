import os
import logging
import requests
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_APIS = {
    "dalle": "https://api.openai.com/v1/images/generations",  # –ü–ª–∞—Ç–Ω—ã–π, –Ω–æ –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    "placeholder": "https://picsum.photos/512/512",  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    "placeholder_custom": "https://picsum.photos/512/512?random="  # –° –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É", callback_data="generate_image")],
        [InlineKeyboardButton("üñºÔ∏è –ú–æ–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", callback_data="my_generations")],
        [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_generate_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="generate_image")],
        [InlineKeyboardButton("üìã –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="new_text")],
        [InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_back_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_confirm_keyboard():
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å!", callback_data="confirm_generate")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data="change_text")],
        [InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_cmd")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_requests = {}

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def generate_placeholder_image(text):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Å–µ–≤–¥–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
    –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ AI API
    """
    # –°–æ–∑–¥–∞–µ–º "—É–Ω–∏–∫–∞–ª—å–Ω—ã–π" URL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
    text_hash = abs(hash(text)) % 1000
    image_url = f"https://picsum.photos/512/512?random={text_hash}"
    
    return {
        "success": True,
        "image_url": image_url,
        "description": f"üñºÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{text}'"
    }

def generate_ai_image(text):
    """
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ DALL-E, Stable Diffusion –∏ —Ç.–¥.
    """
    try:
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ AI API
        # –ù–∞–ø—Ä–∏–º–µ—Ä: 
        # response = requests.post(IMAGE_APIS["dalle"], 
        #                         headers={"Authorization": f"Bearer {API_KEY}"},
        #                         json={"prompt": text, "n": 1, "size": "512x512"})
        
        # –î–ª—è –¥–µ–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º placeholder
        return generate_placeholder_image(text)
        
    except Exception as e:
        logging.error(f"Error generating image: {e}")
        return {
            "success": False,
            "error": "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        }

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = get_main_keyboard()
    
    welcome_text = (
        "üé® **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!**\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é.\n\n"
        "**–ß—Ç–æ —è —É–º–µ—é:**\n"
        "‚Ä¢ üé® –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ —Ç–µ–∫—Å—Ç—É\n"
        "‚Ä¢ üñºÔ∏è –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤–∞—à–∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n"
        "‚Ä¢ ‚ö° –ë—ã—Å—Ç—Ä–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(welcome_text, reply_markup=keyboard, parse_mode='Markdown')

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = (
        "üìñ **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:**\n\n"
        "**–ö–∞–∫ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É'\n"
        "2. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å\n"
        "3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é\n"
        "4. –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
        "‚Ä¢ '–ö–æ—Ç –≤ –∫–æ—Å–º–æ—Å–µ –≤ —Å–∫–∞—Ñ–∞–Ω–¥—Ä–µ'\n"
        "‚Ä¢ '–ó–∞–∫–∞—Ç –Ω–∞–¥ –≥–æ—Ä–Ω—ã–º –æ–∑–µ—Ä–æ–º'\n"
        "‚Ä¢ '–§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –±—É–¥—É—â–µ–≥–æ'\n"
        "‚Ä¢ '–ú–∏–ª–∞—è –ø–∞–Ω–¥–∞ –µ—Å—Ç –±–∞–º–±—É–∫'\n\n"
        "**–°–æ–≤–µ—Ç—ã:**\n"
        "‚Ä¢ –ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ\n"
        "‚Ä¢ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏!"
    )
    
    keyboard = get_back_keyboard()
    
    if update.message:
        await update.message.reply_text(help_text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(help_text, reply_markup=keyboard, parse_mode='Markdown')

async def my_generations_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_history = user_requests.get(user_id, [])
    
    if user_history:
        history_text = "üñºÔ∏è **–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**\n\n"
        for i, request in enumerate(user_history[-5:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤
            history_text += f"{i}. '{request['text']}'\n"
        
        history_text += "\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–≤–æ—Ä–∏—Ç—å! üé®"
    else:
        history_text = "üñºÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n–ù–∞–∂–º–∏—Ç–µ 'üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
    
    keyboard = get_back_keyboard()
    
    if update.message:
        await update.message.reply_text(history_text, reply_markup=keyboard)
    else:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(history_text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "start_cmd":
        await start_command(update, context)
    
    elif data == "generate_image":
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in context.user_data:
            context.user_data[user_id] = {}
        context.user_data[user_id]['waiting_for_text'] = True
        
        instruction_text = (
            "üé® **–ö–∞–∫—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –≤–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?**\n\n"
            "–û–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞–º–∏ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
            "‚Ä¢ '–ö–æ—Å–º–æ–Ω–∞–≤—Ç –∫–∞—Ç–∞–µ—Ç—Å—è –Ω–∞ —Å–∫–µ–π—Ç–µ'\n"
            "‚Ä¢ '–ó–∞–º–æ–∫ –Ω–∞ –æ–±–ª–∞–∫–µ'\n"
            "‚Ä¢ '–†–æ–±–æ—Ç —á–∏—Ç–∞–µ—Ç –∫–Ω–∏–≥—É'\n\n"
            "üí° **–°–æ–≤–µ—Ç:** –ß–µ–º –¥–µ—Ç–∞–ª—å–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç!\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—Å—Ç:"
        )
        
        keyboard = get_back_keyboard()
        await query.edit_message_text(instruction_text, reply_markup=keyboard, parse_mode='Markdown')
    
    elif data == "new_text":
        # –°–Ω–æ–≤–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
        context.user_data[user_id]['waiting_for_text'] = True
        
        instruction_text = "‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏:**"
        await query.edit_message_text(instruction_text, reply_markup=get_back_keyboard())
    
    elif data == "confirm_generate":
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        user_text = context.user_data[user_id].get('pending_text', '')
        
        if not user_text:
            await query.edit_message_text(
                "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_keyboard()
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await query.edit_message_text(
            f"‚ö° **–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...**\n\n"
            f"–ó–∞–ø—Ä–æ—Å: '{user_text}'\n\n"
            f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ ‚è≥",
            parse_mode='Markdown'
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = generate_ai_image(user_text)
        
        if result["success"]:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id not in user_requests:
                user_requests[user_id] = []
            
            user_requests[user_id].append({
                "text": user_text,
                "timestamp": datetime.now().isoformat(),
                "image_url": result["image_url"]
            })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            success_text = (
                f"‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!**\n\n"
                f"üìù –ó–∞–ø—Ä–æ—Å: '{user_text}'\n\n"
                f"–ß—Ç–æ –¥–∞–ª—å—à–µ?"
            )
            
            try:
                await context.bot.send_photo(
                    chat_id=query.message.chat_id,
                    photo=result["image_url"],
                    caption=success_text,
                    reply_markup=get_generate_keyboard(),
                    parse_mode='Markdown'
                )
            except Exception as e:
                logging.error(f"Error sending photo: {e}")
                await query.edit_message_text(
                    f"‚úÖ **–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!**\n\n"
                    f"üìù –ó–∞–ø—Ä–æ—Å: '{user_text}'\n\n"
                    f"üîó –°—Å—ã–ª–∫–∞: {result['image_url']}\n\n"
                    f"–ß—Ç–æ –¥–∞–ª—å—à–µ?",
                    reply_markup=get_generate_keyboard(),
                    parse_mode='Markdown'
                )
        
        else:
            error_text = (
                f"‚ùå **–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{user_text}'\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
            )
            await query.edit_message_text(error_text, reply_markup=get_generate_keyboard(), parse_mode='Markdown')
    
    elif data == "change_text":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞
        context.user_data[user_id]['waiting_for_text'] = True
        old_text = context.user_data[user_id].get('pending_text', '')
        
        change_text = (
            f"‚úèÔ∏è **–ò–∑–º–µ–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç: '{old_text}'\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:"
        )
        await query.edit_message_text(change_text, reply_markup=get_back_keyboard())
    
    elif data == "my_generations":
        await my_generations_command(update, context)
    
    elif data == "help_cmd":
        await help_command(update, context)
    
    elif data == "back_cmd":
        await start_command(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if context.user_data.get(user_id, {}).get('waiting_for_text'):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if user_id not in context.user_data:
            context.user_data[user_id] = {}
        
        context.user_data[user_id]['pending_text'] = text
        context.user_data[user_id]['waiting_for_text'] = False
        
        confirm_text = (
            f"‚úÖ **–¢–µ–∫—Å—Ç –ø—Ä–∏–Ω—è—Ç!**\n\n"
            f"üìù –í–∞—à –∑–∞–ø—Ä–æ—Å: '{text}'\n\n"
            f"–ì–æ—Ç–æ–≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?"
        )
        
        await update.message.reply_text(
            confirm_text,
            reply_markup=get_confirm_keyboard(),
            parse_mode='Markdown'
        )
    
    else:
        # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await start_command(update, context)

def main():
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("mygens", my_generations_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CallbackQueryHandler(button_handler))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    main()
